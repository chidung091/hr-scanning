name: CI/CD for HR Scanning with Environments

on:
  push:
    branches:
      - master # For production
      - develop # For development
  pull_request:
    branches:
      - master
      - develop
  workflow_dispatch: # Allow manual trigger for deployments

jobs:
  lint-and-format:
    name: Lint and Check Code Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

  check-audit:
    name: Check vulnerabilities
    needs: lint-and-format
    runs-on: ubuntu-latest
    steps:
      - name: Step1 Download the Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Step3 Install Dependencies
        run: npm ci

      - name: Step4 NPM Audit Scan and Generate Report in JSON Format
        run: npm audit --audit-level=high --json > audit.json
        continue-on-error: false

      - name: Step5 Upload NPM Audit Scan Report to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: audit.json

  test:
    name: Run Tests
    needs: check-audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          echo "Setting up test environment..."
          cp .env.example .env || echo "No .env.example found, creating basic .env"
          echo "NODE_ENV=test" >> .env
          echo "APP_KEY=$(openssl rand -base64 32)" >> .env
          echo "DRIVE_DISK=fs" >> .env
          echo "SESSION_DRIVER=cookie" >> .env
          echo "HOST=localhost" >> .env
          echo "PORT=0" >> .env
          echo "LOG_LEVEL=info" >> .env
          echo "TZ=UTC" >> .env
          # Database config (even though we use mocks, AdonisJS needs these for initialization)
          echo "DB_CONNECTION=postgres" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_USERNAME=test_user" >> .env
          echo "DB_PASSWORD=test_password" >> .env
          echo "DB_DATABASE=test_db" >> .env
          echo "DB_SSL=false" >> .env
          echo "LIMITER_STORE=memory" >> .env
          echo "OPENAI_API_KEY=test-api-key" >> .env
          echo "Environment setup complete. Contents:"
          cat .env

      - name: Build application
        run: |
          echo "Building application..."
          npm run build
          echo "Build completed successfully"

      - name: Debug environment before tests
        run: |
          echo "=== Environment Debug Information ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Available memory: $(free -h || echo 'free command not available')"
          echo "Available disk space: $(df -h . || echo 'df command not available')"
          echo "Network interfaces: $(ip addr show || ifconfig || echo 'network info not available')"
          echo "Environment variables:"
          echo "NODE_ENV=$NODE_ENV"
          echo "PORT=$PORT"
          echo "HOST=$HOST"
          echo "=== Process Information ==="
          echo "Running processes: $(ps aux | head -10 || echo 'ps command not available')"
          echo "=== End Debug Information ==="

      - name: Run tests with verbose output and monitoring
        run: |
          echo "Starting test execution at $(date)..."

          # Start background monitoring
          (
            while true; do
              echo "[$(date)] Test still running... Memory: $(free -m | grep Mem | awk '{print $3"/"$2" MB"}' || echo 'N/A')"
              sleep 10
            done
          ) &
          MONITOR_PID=$!

          # Run tests with timeout
          timeout 300s npm test || {
            echo "Test execution failed or timed out at $(date)"
            echo "Exit code: $?"
            kill $MONITOR_PID 2>/dev/null || true
            exit 1
          }

          # Stop monitoring
          kill $MONITOR_PID 2>/dev/null || true
          echo "Tests completed successfully at $(date)"

  build_and_push_dev:
    name: Build and Push Docker Image for Development
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.PACKAGE_TOKEN }} | docker login ghcr.io -u chidung091 --password-stdin

      - name: Build and push Docker image (Dev)
        run: |
          docker build -t ghcr.io/chidung091/hr-scanning:dev-latest .
          docker push ghcr.io/chidung091/hr-scanning:dev-latest

  # build_and_push_prod:
  #   name: Build and Push Docker Image for Production
  #   needs: test
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   environment: prod

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Log in to GitHub Container Registry
  #       run: echo ${{ secrets.PACKAGE_TOKEN }} | docker login ghcr.io -u chidung091 --password-stdin

  #     - name: Build and push Docker image (Prod)
  #       run: |
  #         docker build -t ghcr.io/chidung091/hr-scanning:latest .
  #         docker push ghcr.io/chidung091/hr-scanning:latest

  # TODO: Uncomment and configure these deployment jobs when ready
  # deploy_dev:
  #   name: Deploy to Development (without rebuilding)
  #   needs: [build_and_push_dev]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   environment: dev

  #   steps:
  #     - name: Trigger deployment repository (Dev)
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: token ${{ secrets.PAT }}" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/chidung091/hr-deployment/dispatches \
  #           -d '{"event_type":"deploy_dev"}'

  # deploy_prod:
  #   name: Deploy to Production (without rebuilding)
  #   needs: [build_and_push_prod]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   environment: prod

  #   steps:
  #     - name: Trigger deployment repository (Prod)
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: token ${{ secrets.PAT }}" \
  #           -H "Accept: application/vnd.github.v3+json" \
  #           https://api.github.com/repos/chidung091/hr-scanning-deployment/dispatches \
  #           -d '{"event_type":"deploy_prod"}'
