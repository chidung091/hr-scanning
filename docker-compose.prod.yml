version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: hr-scanning-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE:-hr_scanning_prod}
      POSTGRES_USER: ${DB_USERNAME:-hr_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/backup:/backup
    networks:
      - hr-scanning-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-hr_user} -d ${DB_DATABASE:-hr_scanning_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=2GB
      -c max_wal_size=8GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hr-scanning-app-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3333
      HOST: 0.0.0.0
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-hr_user}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE:-hr_scanning_prod}
      SESSION_DRIVER: ${SESSION_DRIVER:-cookie}
      DRIVE_DISK: ${DRIVE_DISK:-fs}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3333:3333"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - hr-scanning-prod
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: hr-scanning-redis-prod
    restart: always
    volumes:
      - redis_prod_data:/data
    networks:
      - hr-scanning-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: hr-scanning-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    networks:
      - hr-scanning-prod
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  hr-scanning-prod:
    driver: bridge
    name: hr-scanning-prod
