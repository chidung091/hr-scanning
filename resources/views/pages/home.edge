<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content="{{ csrfToken }}" />
    <title>
      Japanese Learning Quiz - Master Hiragana & Katakana
    </title>

    <link rel="preconnect" href="https://fonts.bunny.net" />
    <link href="https://fonts.bunny.net/css?family=inter:400,500,600,700" rel="stylesheet" />

    <script src="https://cdn.tailwindcss.com">
      
    </script>

    <script>
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: [ "Inter", "sans-serif" ]
            },
            colors: {
              primary: {
                DEFAULT: "#3b82f6",
                50: "#eff6ff",
                100: "#dbeafe",
                500: "#3b82f6",
                600: "#2563eb",
                700: "#1d4ed8",
                900: "#1e3a8a"
              }
            }
          }
        }
      };
    </script>

    @vite(['resources/css/app.css', 'resources/js/app.js'])
    @stack('dumper')
  </head>
  <body class="min-h-screen bg-gray-50 font-sans">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <h1 class="text-xl sm:text-2xl font-bold text-primary-600">
                ÔøΩüáµ Japanese Learning Quiz
              </h1>
            </div>
          </div>

          <!-- Desktop Navigation -->
          <div class="hidden md:block">
            <div class="ml-10 flex items-baseline space-x-4">
              <a
                href="#quiz-selection"
                class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >Start Quiz</a>
              <a
                href="#japanese-teacher"
                class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >Japanese Teacher</a>
              <a
                href="#about"
                class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >About</a>
              <a
                href="#progress"
                class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
              >Progress</a>
            </div>
          </div>

          <!-- Mobile menu button -->
          <div class="md:hidden">
            <button
              type="button"
              class="mobile-menu-button bg-gray-100 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500"
              aria-controls="mobile-menu"
              aria-expanded="false"
            >
              <span class="sr-only">Open main menu</span>
              <!-- Hamburger icon -->
              <svg
                class="block h-6 w-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
              <!-- Close icon (hidden by default) -->
              <svg
                class="hidden h-6 w-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <!-- Mobile menu -->
        <div class="mobile-menu hidden md:hidden">
          <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t">
            <a
              href="#quiz-selection"
              class="text-gray-600 hover:text-primary-600 block px-3 py-2 rounded-md text-base font-medium transition-colors"
            >Start Quiz</a>
            <a
              href="#japanese-teacher"
              class="text-gray-600 hover:text-primary-600 block px-3 py-2 rounded-md text-base font-medium transition-colors"
            >Japanese Teacher</a>
            <a
              href="#about"
              class="text-gray-600 hover:text-primary-600 block px-3 py-2 rounded-md text-base font-medium transition-colors"
            >About</a>
            <a
              href="#progress"
              class="text-gray-600 hover:text-primary-600 block px-3 py-2 rounded-md text-base font-medium transition-colors"
            >Progress</a>
          </div>
        </div>
      </div>
    </nav>

    <!-- Hero Section -->
    <div class="bg-gradient-to-br from-primary-50 to-blue-100">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 sm:py-16 lg:py-20">
        <div class="text-center">
          <h1
            class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-4 sm:mb-6 leading-tight"
          >
            ÔøΩüáµ Master Japanese
            <span class="text-primary-600 block sm:inline">Characters!</span>
          </h1>
          <p
            class="text-lg sm:text-xl text-gray-600 mb-6 sm:mb-8 max-w-3xl mx-auto px-4 sm:px-0 leading-relaxed"
          >
            Learn Hiragana and Katakana through interactive quizzes! Test your knowledge with 20-question sessions
            and track your progress as you master the fundamentals of Japanese writing.
          </p>
          <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center px-4 sm:px-0">
            <button
              id="start-hiragana-quiz"
              class="bg-primary-600 text-white px-6 sm:px-8 py-4 rounded-lg text-base sm:text-lg font-semibold hover:bg-primary-700 active:bg-primary-800 transition-colors-smooth text-center shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95 min-h-[44px] quiz-button"
            >
              „Å≤ Start Hiragana Quiz
            </button>
            <button
              id="start-katakana-quiz"
              class="bg-white text-primary-600 border-2 border-primary-600 px-6 sm:px-8 py-4 rounded-lg text-base sm:text-lg font-semibold hover:bg-primary-50 active:bg-primary-100 transition-colors-smooth text-center shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95 min-h-[44px] quiz-button"
            >
              „Ç´ Start Katakana Quiz
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Quiz Interface Section -->
    <section id="quiz-interface" class="py-8 sm:py-12 lg:py-20 bg-white hidden">
      <div class="max-w-4xl mx-auto px-3 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-lg quiz-container-mobile sm:p-8">
          <!-- Quiz Header -->
          <div class="text-center mb-6 sm:mb-8 animate-fade-in-up">
            <h2
              id="quiz-title"
              class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-2 mobile-text-xl"
            >
              Hiragana Quiz
            </h2>
            <div
              class="flex flex-col sm:flex-row justify-center items-center space-y-2 sm:space-y-0 sm:space-x-4 text-sm text-gray-600 mb-4"
            >
              <span id="question-counter" class="mobile-text-lg">Question 1 of 20</span>
              <span class="hidden sm:inline">‚Ä¢</span>
              <span id="score-display" class="mobile-text-lg">Score: 0</span>
            </div>
            <!-- Hearts Display -->
            <div class="flex justify-center items-center space-x-1 mb-2 hearts-mobile sm:hearts-desktop">
              <span class="text-sm text-gray-600 mr-2 mobile-text-lg">Lives:</span>
              <div id="hearts-display" class="flex space-x-1 transition-all-smooth">
                <span class="heart text-red-500 text-xl">‚ù§Ô∏è</span>
                <span class="heart text-red-500 text-xl">‚ù§Ô∏è</span>
                <span class="heart text-red-500 text-xl">‚ù§Ô∏è</span>
              </div>
            </div>
          </div>

          <!-- Progress Bar -->
          <div class="w-full bg-gray-200 rounded-full h-2 sm:h-3 mb-6 sm:mb-8">
            <div
              id="progress-bar"
              class="bg-primary-600 h-2 sm:h-3 rounded-full transition-all duration-500 ease-out"
              style="width: 5%"
            >
            </div>
          </div>

          <!-- Question Display -->
          <div class="text-center mb-6 sm:mb-8 animate-slide-in-right">
            <div class="bg-gray-50 rounded-lg p-6 sm:p-8 mb-4 sm:mb-6 transition-all-smooth">
              <div
                id="character-display"
                class="text-6xl sm:text-8xl lg:text-9xl font-bold text-gray-900 mb-3 sm:mb-4 character-display-mobile transition-transform-smooth hover:scale-105 select-none"
              >
                „ÅÇ
              </div>
              <p class="text-base sm:text-lg text-gray-600 mobile-text-lg px-2 sm:px-0">
                What is the romanization of this character?
              </p>
            </div>
          </div>

          <!-- Answer Options -->
          <div
            id="answer-options"
            class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 mb-6 sm:mb-8 animate-fade-in-up"
          >
            <button
              class="answer-option bg-gray-100 hover:bg-primary-50 active:bg-primary-100 border-2 border-transparent hover:border-primary-300 focus:border-primary-500 rounded-lg p-4 sm:p-4 text-base sm:text-lg font-medium transition-colors-smooth transform hover:scale-[1.02] active:scale-[0.98] min-h-[44px] quiz-button"
            >
              a
            </button>
            <button
              class="answer-option bg-gray-100 hover:bg-primary-50 active:bg-primary-100 border-2 border-transparent hover:border-primary-300 focus:border-primary-500 rounded-lg p-4 sm:p-4 text-base sm:text-lg font-medium transition-colors-smooth transform hover:scale-[1.02] active:scale-[0.98] min-h-[44px] quiz-button"
            >
              ka
            </button>
            <button
              class="answer-option bg-gray-100 hover:bg-primary-50 active:bg-primary-100 border-2 border-transparent hover:border-primary-300 focus:border-primary-500 rounded-lg p-4 sm:p-4 text-base sm:text-lg font-medium transition-colors-smooth transform hover:scale-[1.02] active:scale-[0.98] min-h-[44px] quiz-button"
            >
              sa
            </button>
            <button
              class="answer-option bg-gray-100 hover:bg-primary-50 active:bg-primary-100 border-2 border-transparent hover:border-primary-300 focus:border-primary-500 rounded-lg p-4 sm:p-4 text-base sm:text-lg font-medium transition-colors-smooth transform hover:scale-[1.02] active:scale-[0.98] min-h-[44px] quiz-button"
            >
              ta
            </button>
          </div>

          <!-- Feedback Display -->
          <div id="feedback-display" class="text-center mb-4 sm:mb-6 hidden animate-fade-in-up">
            <div id="feedback-message" class="text-base sm:text-lg font-semibold mb-2 mobile-text-lg">
            </div>
            <div id="correct-answer" class="text-gray-600 text-sm sm:text-base mobile-text-lg">
            </div>
          </div>

          <!-- Next Button -->
          <div class="text-center">
            <button
              id="next-question"
              class="bg-primary-600 text-white px-6 sm:px-8 py-3 rounded-lg font-semibold hover:bg-primary-700 active:bg-primary-800 transition-colors-smooth transform hover:scale-105 active:scale-95 hidden min-h-[44px] quiz-button"
            >
              Next Question
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Quiz Results Section -->
    <section id="quiz-results" class="py-12 sm:py-16 lg:py-20 bg-gray-50 hidden">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-lg p-6 sm:p-8 text-center">
          <div class="mb-8">
            <div class="text-6xl mb-4">
              üéâ
            </div>
            <h2 class="text-3xl font-bold text-gray-900 mb-4">
              Quiz Complete!
            </h2>
            <div id="final-score" class="text-2xl font-semibold text-primary-600 mb-2">
              Score: 0/20
            </div>
            <div id="final-percentage" class="text-lg text-gray-600 mb-6">
              0% Correct
            </div>
          </div>

          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              id="restart-quiz"
              class="bg-primary-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-primary-700 transition-all duration-200"
            >
              Try Again
            </button>
            <button
              id="switch-mode"
              class="bg-white text-primary-600 border-2 border-primary-600 px-8 py-3 rounded-lg font-semibold hover:bg-primary-50 transition-all duration-200"
            >
              Switch Mode
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Game Over Modal -->
    <div
      id="game-over-modal"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
    >
      <div class="bg-white rounded-lg shadow-xl p-8 max-w-md mx-4 text-center">
        <div class="mb-6">
          <div class="text-6xl mb-4">
            üíî
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-2">
            Game Over!
          </h2>
          <p class="text-gray-600 mb-4">
            You've run out of hearts. Don't worry, you can try again!
          </p>
          <div class="bg-gray-50 rounded-lg p-4 mb-4">
            <div class="text-sm text-gray-600 mb-2">
              Final Results:
            </div>
            <div id="game-over-score" class="text-lg font-semibold text-gray-900 mb-1">
              Score: 0/20
            </div>
            <div id="game-over-percentage" class="text-sm text-gray-600">
              0% Correct
            </div>
          </div>
        </div>
        <div class="flex flex-col sm:flex-row gap-3 justify-center">
          <button
            id="game-over-restart"
            class="bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-700 transition-all duration-200"
          >
            Try Again
          </button>
          <button
            id="game-over-home"
            class="bg-white text-primary-600 border-2 border-primary-600 px-6 py-3 rounded-lg font-semibold hover:bg-primary-50 transition-all duration-200"
          >
            Back to Home
          </button>
        </div>
      </div>
    </div>

    <!-- Japanese Teacher Section -->
    <section id="japanese-teacher" class="py-12 sm:py-16 lg:py-20 bg-gray-50">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12 sm:mb-16">
          <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-4 px-4 sm:px-0">
            üéå Japanese Teacher
          </h2>
          <p class="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 sm:px-0 leading-relaxed">
            Get detailed explanations of Japanese words and grammar patterns in Vietnamese.
            Enter any Japanese text and receive romaji, furigana, meanings, examples, and usage notes.
          </p>
        </div>

        <div class="bg-white rounded-lg shadow-lg p-6 sm:p-8">
          <!-- Input Form -->
          <div class="mb-8">
            <label for="japanese-input" class="block text-sm font-medium text-gray-700 mb-2">
              Enter Japanese word or grammar pattern:
            </label>
            <div class="flex flex-col sm:flex-row gap-4">
              <input
                type="text"
                id="japanese-input"
                class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-lg"
                placeholder="‰æã: È†ëÂºµ„Çä„Åæ„Åô"
                autocomplete="off"
              />
              <button
                id="japanese-submit"
                class="bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span id="submit-text">Explain</span>
                <span id="submit-loading" class="hidden">
                  <svg
                    class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />

                    <path
                      class="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    />

                  </svg>
                  Processing...
                </span>
              </button>
            </div>
          </div>

          <!-- Error Display -->
          <div
            id="japanese-error"
            class="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 hidden"
          >
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clip-rule="evenodd"
                />

              </svg>
              <span id="error-message">An error occurred. Please try again.</span>
            </div>
          </div>

          <!-- Results Display -->
          <div id="japanese-results" class="hidden">
            <div class="border-t pt-6">
              <h3 class="text-xl font-semibold text-gray-900 mb-6 text-center">
                Explanation
              </h3>

              <!-- Desktop Layout (preserved) -->
              <div class="japanese-teacher-desktop-layout">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <!-- Left Column -->
                  <div class="space-y-4">
                    <div class="bg-gray-50 p-4 rounded-lg">
                      <h4 class="font-semibold text-gray-700 mb-2">
                        Input
                      </h4>
                      <p id="result-input-desktop" class="text-lg font-medium text-gray-900">
                      </p>
                    </div>

                    <div class="bg-gray-50 p-4 rounded-lg">
                      <h4 class="font-semibold text-gray-700 mb-2">
                        Romaji
                      </h4>
                      <p id="result-romaji-desktop" class="text-lg text-gray-900">
                      </p>
                    </div>

                    <div class="bg-gray-50 p-4 rounded-lg">
                      <h4 class="font-semibold text-gray-700 mb-2">
                        Furigana
                      </h4>
                      <p id="result-furigana-desktop" class="text-lg text-gray-900">
                      </p>
                    </div>

                    <div class="bg-blue-50 p-4 rounded-lg">
                      <h4 class="font-semibold text-blue-700 mb-2">
                        Pronunciation Guide
                      </h4>
                      <p id="result-pronunciation-desktop" class="text-lg text-gray-900">
                      </p>
                    </div>
                  </div>

                  <!-- Right Column -->
                  <div class="space-y-4">
                    <div class="bg-primary-50 p-4 rounded-lg">
                      <h4 class="font-semibold text-primary-700 mb-2">
                        Vietnamese Meaning
                      </h4>
                      <p id="result-meaning-desktop" class="text-lg text-gray-900">
                      </p>
                    </div>

                    <div class="bg-green-50 p-4 rounded-lg">
                      <h4 class="font-semibold text-green-700 mb-2">
                        Example (Japanese)
                      </h4>
                      <p id="result-example-jp-desktop" class="text-lg text-gray-900 mb-2">
                      </p>
                      <h4 class="font-semibold text-green-700 mb-2">
                        Example (Vietnamese)
                      </h4>
                      <p id="result-example-vn-desktop" class="text-gray-700">
                      </p>
                    </div>
                  </div>
                </div>

                <!-- Notes Section -->
                <div class="mt-6 bg-yellow-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-yellow-700 mb-2">
                    Usage Notes
                  </h4>
                  <p id="result-note-desktop" class="text-gray-700">
                  </p>
                </div>
              </div>

              <!-- Mobile Swipe Layout -->
              <div class="japanese-teacher-mobile-layout" role="region" aria-label="Japanese explanation slides">
                <!-- Progress Bar -->
                <div class="japanese-teacher-progress" role="progressbar" aria-label="Explanation progress">
                  <div
                    id="japanese-teacher-progress-bar"
                    class="japanese-teacher-progress-bar"
                    style="width: 16.67%"
                    aria-valuenow="1"
                    aria-valuemin="1"
                    aria-valuemax="6"
                  >
                  </div>
                </div>

                <!-- Swipe Container -->
                <div class="japanese-teacher-mobile-container" role="tabpanel" aria-live="polite">
                  <!-- Navigation Arrows -->
                  <button id="japanese-teacher-prev" class="japanese-teacher-nav prev" aria-label="Previous section">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="15,18 9,12 15,6" />

                    </svg>
                  </button>
                  <button id="japanese-teacher-next" class="japanese-teacher-nav next" aria-label="Next section">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="9,18 15,12 9,6" />

                    </svg>
                  </button>

                  <!-- Swipe Wrapper -->
                  <div id="japanese-teacher-swipe-wrapper" class="japanese-teacher-swipe-wrapper" role="tablist">
                    <!-- Slide 1: Input & Basic Info -->
                    <div
                      class="japanese-teacher-slide"
                      role="tabpanel"
                      aria-label="Japanese word and furigana"
                      tabindex="0"
                    >
                      <div class="japanese-teacher-slide-content">
                        <div class="text-center mb-4">
                          <h4 class="text-lg font-semibold text-gray-800 mb-2">
                            Japanese Word
                          </h4>
                          <p id="result-input-mobile" class="text-2xl font-bold text-gray-900 mb-2">
                          </p>
                          <p id="result-furigana-mobile" class="text-lg text-gray-600">
                          </p>
                        </div>
                      </div>
                    </div>

                    <!-- Slide 2: Pronunciation -->
                    <div class="japanese-teacher-slide" role="tabpanel" aria-label="Pronunciation guide" tabindex="0">
                      <div class="japanese-teacher-slide-content">
                        <div class="text-center">
                          <h4 class="text-lg font-semibold text-blue-700 mb-4">
                            Pronunciation
                          </h4>
                          <p id="result-romaji-mobile" class="text-xl font-medium text-gray-900 mb-4">
                          </p>
                          <div class="bg-blue-50 p-4 rounded-lg">
                            <p id="result-pronunciation-mobile" class="text-gray-700 leading-relaxed">
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Slide 3: Vietnamese Meaning -->
                    <div class="japanese-teacher-slide" role="tabpanel" aria-label="Vietnamese meaning" tabindex="0">
                      <div class="japanese-teacher-slide-content">
                        <div class="text-center">
                          <h4 class="text-lg font-semibold text-primary-700 mb-4">
                            Vietnamese Meaning
                          </h4>
                          <div class="bg-primary-50 p-4 rounded-lg">
                            <p id="result-meaning-mobile" class="text-lg text-gray-900 leading-relaxed">
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Slide 4: Japanese Example -->
                    <div
                      class="japanese-teacher-slide"
                      role="tabpanel"
                      aria-label="Japanese example sentence"
                      tabindex="0"
                    >
                      <div class="japanese-teacher-slide-content">
                        <div class="text-center">
                          <h4 class="text-lg font-semibold text-green-700 mb-4">
                            Example Sentence
                          </h4>
                          <div class="bg-green-50 p-4 rounded-lg mb-4">
                            <p id="result-example-jp-mobile" class="text-lg font-medium text-gray-900 mb-2">
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Slide 5: Vietnamese Example -->
                    <div
                      class="japanese-teacher-slide"
                      role="tabpanel"
                      aria-label="Vietnamese example translation"
                      tabindex="0"
                    >
                      <div class="japanese-teacher-slide-content">
                        <div class="text-center">
                          <h4 class="text-lg font-semibold text-green-700 mb-4">
                            Example Translation
                          </h4>
                          <div class="bg-green-50 p-4 rounded-lg">
                            <p id="result-example-vn-mobile" class="text-lg text-gray-700 leading-relaxed">
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Slide 6: Usage Notes -->
                    <div class="japanese-teacher-slide" role="tabpanel" aria-label="Usage notes and tips" tabindex="0">
                      <div class="japanese-teacher-slide-content">
                        <div class="text-center">
                          <h4 class="text-lg font-semibold text-yellow-700 mb-4">
                            Usage Notes
                          </h4>
                          <div class="bg-yellow-50 p-4 rounded-lg">
                            <p id="result-note-mobile" class="text-gray-700 leading-relaxed">
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Pagination Dots -->
                <div
                  id="japanese-teacher-pagination"
                  class="japanese-teacher-pagination"
                  role="tablist"
                  aria-label="Explanation sections"
                >
                  <div
                    class="japanese-teacher-dot active"
                    data-slide="0"
                    role="tab"
                    aria-label="Japanese word"
                    aria-selected="true"
                    tabindex="0"
                  >
                  </div>
                  <div
                    class="japanese-teacher-dot"
                    data-slide="1"
                    role="tab"
                    aria-label="Pronunciation"
                    aria-selected="false"
                    tabindex="-1"
                  >
                  </div>
                  <div
                    class="japanese-teacher-dot"
                    data-slide="2"
                    role="tab"
                    aria-label="Vietnamese meaning"
                    aria-selected="false"
                    tabindex="-1"
                  >
                  </div>
                  <div
                    class="japanese-teacher-dot"
                    data-slide="3"
                    role="tab"
                    aria-label="Japanese example"
                    aria-selected="false"
                    tabindex="-1"
                  >
                  </div>
                  <div
                    class="japanese-teacher-dot"
                    data-slide="4"
                    role="tab"
                    aria-label="Vietnamese example"
                    aria-selected="false"
                    tabindex="-1"
                  >
                  </div>
                  <div
                    class="japanese-teacher-dot"
                    data-slide="5"
                    role="tab"
                    aria-label="Usage notes"
                    aria-selected="false"
                    tabindex="-1"
                  >
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- About Section -->
    <section id="about" class="py-12 sm:py-16 lg:py-20 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12 sm:mb-16">
          <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-4 px-4 sm:px-0">
            About Japanese Learning
          </h2>
          <p class="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 sm:px-0 leading-relaxed">
            Master the fundamentals of Japanese writing with our interactive quiz system.
            Learn Hiragana and Katakana characters through spaced repetition and immediate feedback.
          </p>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
          <div class="text-center p-4 sm:p-6 rounded-lg hover:bg-gray-50 transition-colors">
            <div
              class="bg-primary-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 shadow-sm"
            >
              <div class="text-2xl">
                „Å≤
              </div>
            </div>
            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">
              Hiragana Practice
            </h3>
            <p class="text-gray-600 text-sm sm:text-base leading-relaxed">
              Learn the basic Japanese syllabary used for native words and grammatical elements.
            </p>
          </div>

          <div class="text-center p-4 sm:p-6 rounded-lg hover:bg-gray-50 transition-colors">
            <div
              class="bg-primary-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 shadow-sm"
            >
              <div class="text-2xl">
                „Ç´
              </div>
            </div>
            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">
              Katakana Practice
            </h3>
            <p class="text-gray-600 text-sm sm:text-base leading-relaxed">
              Master the syllabary used for foreign words, onomatopoeia, and emphasis.
            </p>
          </div>

          <div
            class="text-center p-4 sm:p-6 rounded-lg hover:bg-gray-50 transition-colors sm:col-span-2 lg:col-span-1"
          >
            <div
              class="bg-primary-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 shadow-sm"
            >
              <div class="text-2xl">
                üìä
              </div>
            </div>
            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">
              Progress Tracking
            </h3>
            <p class="text-gray-600 text-sm sm:text-base leading-relaxed">
              Track your learning progress with detailed statistics and immediate feedback on each quiz.
            </p>
          </div>
        </div>
      </div>
    </section>

    <!-- Progress Section -->
    <section id="progress" class="py-12 sm:py-16 lg:py-20 bg-gray-50">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12 sm:mb-16">
          <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-4 px-4 sm:px-0">
            üìä Your Learning Progress
          </h2>
          <p class="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 sm:px-0 leading-relaxed">
            Track your progress as you master Japanese characters. Each quiz helps you improve your recognition speed and accuracy.
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <!-- Hiragana Progress -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center mb-4">
              <div class="bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mr-4">
                <div class="text-xl font-bold">
                  „Å≤
                </div>
              </div>
              <h3 class="text-xl font-semibold text-gray-900">
                Hiragana Progress
              </h3>
            </div>
            <div class="space-y-4">
              <div>
                <div class="flex justify-between text-sm text-gray-600 mb-1">
                  <span>Overall Accuracy</span>
                  <span id="hiragana-accuracy">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div
                    id="hiragana-progress-bar"
                    class="bg-primary-600 h-2 rounded-full transition-all duration-300"
                    style="width: 0%"
                  >
                  </div>
                </div>
              </div>
              <div class="grid grid-cols-2 gap-4 text-sm">
                <div class="text-center">
                  <div id="hiragana-quizzes" class="text-2xl font-bold text-primary-600">
                    0
                  </div>
                  <div class="text-gray-600">
                    Quizzes Taken
                  </div>
                </div>
                <div class="text-center">
                  <div id="hiragana-best" class="text-2xl font-bold text-primary-600">
                    0
                  </div>
                  <div class="text-gray-600">
                    Best Score
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Katakana Progress -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center mb-4">
              <div class="bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mr-4">
                <div class="text-xl font-bold">
                  „Ç´
                </div>
              </div>
              <h3 class="text-xl font-semibold text-gray-900">
                Katakana Progress
              </h3>
            </div>
            <div class="space-y-4">
              <div>
                <div class="flex justify-between text-sm text-gray-600 mb-1">
                  <span>Overall Accuracy</span>
                  <span id="katakana-accuracy">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div
                    id="katakana-progress-bar"
                    class="bg-primary-600 h-2 rounded-full transition-all duration-300"
                    style="width: 0%"
                  >
                  </div>
                </div>
              </div>
              <div class="grid grid-cols-2 gap-4 text-sm">
                <div class="text-center">
                  <div id="katakana-quizzes" class="text-2xl font-bold text-primary-600">
                    0
                  </div>
                  <div class="text-gray-600">
                    Quizzes Taken
                  </div>
                </div>
                <div class="text-center">
                  <div id="katakana-best" class="text-2xl font-bold text-primary-600">
                    0
                  </div>
                  <div class="text-gray-600">
                    Best Score
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Stats -->
        <div class="mt-8 bg-white rounded-lg shadow-lg p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4 text-center">
            Quick Stats
          </h3>
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-center">
            <div>
              <div id="total-questions" class="text-2xl font-bold text-primary-600">
                0
              </div>
              <div class="text-gray-600">
                Total Questions
              </div>
            </div>
            <div>
              <div id="total-correct" class="text-2xl font-bold text-green-600">
                0
              </div>
              <div class="text-gray-600">
                Correct Answers
              </div>
            </div>
            <div>
              <div id="overall-accuracy" class="text-2xl font-bold text-blue-600">
                0%
              </div>
              <div class="text-gray-600">
                Overall Accuracy
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <footer class="bg-gray-900 text-white py-8 sm:py-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-8">
          <div class="col-span-1 sm:col-span-2 lg:col-span-2">
            <h3 class="text-xl sm:text-2xl font-bold mb-4">
              ÔøΩüáµ Japanese Learning Quiz
            </h3>
            <p class="text-gray-300 mb-4 text-sm sm:text-base leading-relaxed">
              Master Japanese characters through interactive learning. Practice Hiragana and Katakana with our
              comprehensive quiz system designed to help you learn efficiently and effectively.
            </p>
            <div class="flex space-x-4">
              <a href="#" class="text-gray-300 hover:text-white transition-colors text-sm sm:text-base">GitHub</a>
              <a href="#" class="text-gray-300 hover:text-white transition-colors text-sm sm:text-base">Documentation</a>
              <a href="#" class="text-gray-300 hover:text-white transition-colors text-sm sm:text-base">Support</a>
            </div>
          </div>

          <div class="col-span-1">
            <h4 class="text-lg font-semibold mb-4">
              Quick Links
            </h4>
            <ul class="space-y-2 text-gray-300">
              <li>
                <a href="#about" class="hover:text-white transition-colors text-sm sm:text-base">About Learning</a>
              </li>
              <li>
                <a href="#quiz-selection" class="hover:text-white transition-colors text-sm sm:text-base">Start Quiz</a>
              </li>
              <li>
                <a href="#japanese-teacher" class="hover:text-white transition-colors text-sm sm:text-base">Japanese Teacher</a>
              </li>
              <li>
                <a href="#progress" class="hover:text-white transition-colors text-sm sm:text-base">Progress</a>
              </li>
              <li>
                <a href="#" class="hover:text-white transition-colors text-sm sm:text-base">Help</a>
              </li>
            </ul>
          </div>

          <div class="col-span-1">
            <h4 class="text-lg font-semibold mb-4">
              Learning Modes
            </h4>
            <ul class="space-y-2 text-gray-300">
              <li>
                <span class="text-sm sm:text-base">„Å≤ Hiragana Quiz</span>
              </li>
              <li>
                <span class="text-sm sm:text-base">„Ç´ Katakana Quiz</span>
              </li>
              <li>
                <span class="text-sm sm:text-base">ÔøΩ Progress Tracking</span>
              </li>
              <li>
                <span class="text-sm sm:text-base">ÔøΩ 20 Questions Each</span>
              </li>
            </ul>
          </div>
        </div>

        <div class="border-t border-gray-800 mt-6 sm:mt-8 pt-6 sm:pt-8 text-center text-gray-300">
          <p class="text-sm sm:text-base">
            &copy; 2024 Japanese Learning Quiz. Learn with confidence! üáØüáµ
          </p>
        </div>
      </div>
    </footer>

    <!-- Quiz JavaScript -->
    <script>
      class JapaneseQuiz {
        constructor() {
          this.sessionId = null;
          this.currentQuestion = null;
          this.quizType = null;
          this.score = 0;
          this.questionNumber = 0;
          this.totalQuestions = 20;
          this.hearts = 3;
          this.maxHearts = 3;
          this.isGameOver = false;
          this.isAnswered = false;
          this.csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute("content");
          this.initializeElements();
          this.bindEvents();
          this.loadProgress();
        }
        initializeElements() {
          // Sections
          this.heroSection = document.querySelector(".bg-gradient-to-br");
          this.quizInterface = document.getElementById("quiz-interface");
          this.quizResults = document.getElementById("quiz-results");
          this.aboutSection = document.getElementById("about");
          this.progressSection = document.getElementById("progress");
          this.japaneseTeacherSection = document.getElementById("japanese-teacher");
          // Quiz elements
          this.quizTitle = document.getElementById("quiz-title");
          this.questionCounter = document.getElementById("question-counter");
          this.scoreDisplay = document.getElementById("score-display");
          this.heartsDisplay = document.getElementById("hearts-display");
          this.progressBar = document.getElementById("progress-bar");
          this.characterDisplay = document.getElementById("character-display");
          this.answerOptions = document.getElementById("answer-options");
          this.feedbackDisplay = document.getElementById("feedback-display");
          this.feedbackMessage = document.getElementById("feedback-message");
          this.correctAnswer = document.getElementById("correct-answer");
          this.nextButton = document.getElementById("next-question");
          // Results elements
          this.finalScore = document.getElementById("final-score");
          this.finalPercentage = document.getElementById("final-percentage");
          // Game Over Modal elements
          this.gameOverModal = document.getElementById("game-over-modal");
          this.gameOverScore = document.getElementById("game-over-score");
          this.gameOverPercentage = document.getElementById("game-over-percentage");
          this.gameOverRestartBtn = document.getElementById("game-over-restart");
          this.gameOverHomeBtn = document.getElementById("game-over-home");
          // Buttons
          this.startHiraganaBtn = document.getElementById("start-hiragana-quiz");
          this.startKatakanaBtn = document.getElementById("start-katakana-quiz");
          this.restartBtn = document.getElementById("restart-quiz");
          this.switchModeBtn = document.getElementById("switch-mode");
          // Japanese Teacher elements
          this.japaneseInput = document.getElementById("japanese-input");
          this.japaneseSubmit = document.getElementById("japanese-submit");
          this.japaneseError = document.getElementById("japanese-error");
          this.japaneseResults = document.getElementById("japanese-results");
          this.submitText = document.getElementById("submit-text");
          this.submitLoading = document.getElementById("submit-loading");
          this.errorMessage = document.getElementById("error-message");
        }
        bindEvents() {
          this.startHiraganaBtn.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.startQuiz("hiragana");
          });
          this.startKatakanaBtn.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.startQuiz("katakana");
          });
          this.nextButton.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.nextQuestion();
          });
          this.restartBtn.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.restartQuiz();
          });
          this.switchModeBtn.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.switchMode();
          });
          // Game Over Modal events
          this.gameOverRestartBtn.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.restartFromGameOver();
          });
          this.gameOverHomeBtn.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.goHome();
          });
          // Japanese Teacher events
          this.japaneseSubmit.addEventListener("click", e => {
            this.animateButtonPress(e.target);
            this.submitJapaneseTeacher();
          });
          this.japaneseInput.addEventListener("keypress", e => {
            if (e.key === "Enter") {
              this.submitJapaneseTeacher();
            }
          });
          // Mobile menu functionality
          this.setupMobileMenu();
        }
        setupMobileMenu() {
          const mobileMenuButton = document.querySelector(".mobile-menu-button");
          const mobileMenu = document.querySelector(".mobile-menu");
          const hamburgerIcon = mobileMenuButton.querySelector("svg:first-child");
          const closeIcon = mobileMenuButton.querySelector("svg:last-child");
          mobileMenuButton.addEventListener("click", function() {
            const isExpanded = mobileMenuButton.getAttribute("aria-expanded") === "true";
            mobileMenu.classList.toggle("hidden");
            hamburgerIcon.classList.toggle("hidden");
            hamburgerIcon.classList.toggle("block");
            closeIcon.classList.toggle("hidden");
            closeIcon.classList.toggle("block");
            mobileMenuButton.setAttribute("aria-expanded", !isExpanded);
          });
          // Close mobile menu when clicking on links
          const mobileMenuLinks = mobileMenu.querySelectorAll("a");
          mobileMenuLinks.forEach(link => {
            link.addEventListener("click", function() {
              mobileMenu.classList.add("hidden");
              hamburgerIcon.classList.remove("hidden");
              hamburgerIcon.classList.add("block");
              closeIcon.classList.add("hidden");
              closeIcon.classList.remove("block");
              mobileMenuButton.setAttribute("aria-expanded", "false");
            });
          });
          // Smooth scrolling for anchor links
          document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener("click", function(e) {
              e.preventDefault();
              const target = document.querySelector(this.getAttribute("href"));
              if (target) {
                target.scrollIntoView({
                  behavior: "smooth",
                  block: "start"
                });
              }
            });
          });
        }
        async startQuiz(type) {
          try {
            const response = await fetch("/api/quiz/start", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": this.csrfToken
              },
              body: JSON.stringify({
                type: type
              })
            });
            if (!response.ok) {
              throw new Error("Failed to start quiz");
            }
            const data = await response.json();
            this.sessionId = data.sessionId;
            this.quizType = type;
            this.totalQuestions = data.totalQuestions;
            this.currentQuestion = data.currentQuestion;
            this.score = 0;
            this.hearts = data.hearts || 3;
            this.maxHearts = data.maxHearts || 3;
            this.isGameOver = data.isGameOver || false;
            this.questionNumber = 1;
            this.isAnswered = false;
            this.showQuizInterface();
            this.displayQuestion();
          } catch (error) {
            console.error("Error starting quiz:", error);
            alert("Failed to start quiz. Please try again.");
          }
        }
        showQuizInterface() {
          this.heroSection.classList.add("hidden");
          this.aboutSection.classList.add("hidden");
          this.progressSection.classList.add("hidden");
          this.japaneseTeacherSection.classList.add("hidden");
          this.quizResults.classList.add("hidden");
          this.quizInterface.classList.remove("hidden");
          this.quizTitle.textContent = this.quizType === "hiragana" ? "Hiragana Quiz" : "Katakana Quiz";
        }
        displayQuestion() {
          if (!this.currentQuestion) return;
          this.questionCounter.textContent = `Question ${this.questionNumber} of ${this.totalQuestions}`;
          this.scoreDisplay.textContent = `Score: ${this.score}`;
          this.updateHeartsDisplay();
          // Animate progress bar
          const progressPercentage = this.questionNumber / this.totalQuestions * 100;
          this.animateProgressBar(progressPercentage);
          this.characterDisplay.textContent = this.currentQuestion.character;
          // Clear previous options
          this.answerOptions.innerHTML = "";
          // Create answer buttons
          this.currentQuestion.options.forEach(option => {
            const button = document.createElement("button");
            button.className = "answer-option bg-gray-100 hover:bg-primary-50 border-2 border-transparent hover:border-primary-300 rounded-lg p-4 text-lg font-medium transition-all duration-200";
            button.textContent = option;
            button.addEventListener("click", () => this.selectAnswer(option, button));
            this.answerOptions.appendChild(button);
          });
          // Hide feedback and next button
          this.feedbackDisplay.classList.add("hidden");
          this.nextButton.classList.add("hidden");
          this.isAnswered = false;
        }
        updateHeartsDisplay() {
          if (!this.heartsDisplay) return;
          // Store previous hearts count for animation
          const previousHearts = this.heartsDisplay.querySelectorAll(".heart.text-red-500").length;
          this.heartsDisplay.innerHTML = "";
          for (let i = 0; i < this.maxHearts; i++) {
            const heart = document.createElement("span");
            heart.className = "heart text-xl transition-all-smooth";
            if (i < this.hearts) {
              heart.textContent = "‚ù§Ô∏è";
              heart.classList.add("text-red-500");
            } else {
              heart.textContent = "ü§ç";
              heart.classList.add("text-gray-300");
              // Animate heart loss if this heart was just lost
              if (i === this.hearts && previousHearts > this.hearts) {
                setTimeout(() => this.animateHeartLoss(heart), 100);
              }
            }
            this.heartsDisplay.appendChild(heart);
          }
        }
        showGameOverModal() {
          const percentage = Math.round(this.score / this.questionNumber * 100);
          this.gameOverScore.textContent = `Score: ${this.score}/${this.questionNumber}`;
          this.gameOverPercentage.textContent = `${percentage}% Correct`;
          this.gameOverModal.classList.remove("hidden");
        }
        hideGameOverModal() {
          this.gameOverModal.classList.add("hidden");
        }
        restartFromGameOver() {
          this.hideGameOverModal();
          this.restartQuiz();
        }
        goHome() {
          this.hideGameOverModal();
          this.showHome();
        }
        showHome() {
          this.quizInterface.classList.add("hidden");
          this.quizResults.classList.add("hidden");
          this.heroSection.classList.remove("hidden");
          this.aboutSection.classList.remove("hidden");
          this.progressSection.classList.remove("hidden");
          this.japaneseTeacherSection.classList.remove("hidden");
        }
        // Animation Methods
        animateButtonPress(button) {
          if (!button) return;
          button.classList.add("animate-button-press");
          setTimeout(() => {
            button.classList.remove("animate-button-press");
          }, 150);
        }
        animateCorrectAnswer(button) {
          if (!button) return;
          button.classList.add("animate-correct-answer");
          setTimeout(() => {
            button.classList.remove("animate-correct-answer");
          }, 600);
        }
        animateIncorrectAnswer(button) {
          if (!button) return;
          button.classList.add("animate-incorrect-answer");
          setTimeout(() => {
            button.classList.remove("animate-incorrect-answer");
          }, 500);
        }
        animateHeartLoss(heartElement) {
          if (!heartElement) return;
          heartElement.classList.add("animate-heart-loss");
          // Don't remove the class as it should stay in the lost state
        }
        animateQuestionTransition() {
          const questionDisplay = document.querySelector("#character-display").parentElement;
          const answerOptions = document.getElementById("answer-options");
          // Fade out current content
          questionDisplay.style.opacity = "0";
          answerOptions.style.opacity = "0";
          setTimeout(() => {
            // Fade in new content
            questionDisplay.style.opacity = "1";
            answerOptions.style.opacity = "1";
            questionDisplay.classList.add("animate-slide-in-right");
            answerOptions.classList.add("animate-fade-in-up");
            // Clean up animation classes
            setTimeout(() => {
              questionDisplay.classList.remove("animate-slide-in-right");
              answerOptions.classList.remove("animate-fade-in-up");
            }, 500);
          }, 200);
        }
        animateProgressBar(percentage) {
          const progressBar = document.getElementById("progress-bar");
          if (!progressBar) return;
          progressBar.style.width = `${percentage}%`;
          progressBar.classList.add("animate-pulse-gentle");
          setTimeout(() => {
            progressBar.classList.remove("animate-pulse-gentle");
          }, 1e3);
        }
        async selectAnswer(selectedAnswer, buttonElement) {
          if (this.isAnswered) return;
          this.isAnswered = true;
          // Animate button press
          this.animateButtonPress(buttonElement);
          try {
            const response = await fetch(`/api/quiz/${this.sessionId}/answer`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": this.csrfToken
              },
              body: JSON.stringify({
                answer: selectedAnswer
              })
            });
            if (!response.ok) {
              throw new Error("Failed to submit answer");
            }
            const data = await response.json();
            this.score = data.score;
            this.questionNumber = data.questionNumber;
            this.hearts = data.hearts;
            this.isGameOver = data.isGameOver;
            // Show feedback
            this.showFeedback(data.isCorrect, data.correctAnswer, buttonElement);
            // Check for game over due to no hearts
            if (data.isGameOver && data.gameOverReason === "no_hearts") {
              setTimeout(() => {
                this.showGameOverModal();
              }, 2e3); // Show modal after feedback is displayed
            } else if (data.completed) {
              this.showResults(data);
            } else {
              this.nextButton.classList.remove("hidden");
            }
          } catch (error) {
            console.error("Error submitting answer:", error);
            alert("Failed to submit answer. Please try again.");
            this.isAnswered = false;
          }
        }
        showFeedback(isCorrect, correctAnswer, selectedButton) {
          // Disable all buttons
          const allButtons = this.answerOptions.querySelectorAll(".answer-option");
          allButtons.forEach(btn => {
            btn.disabled = true;
            btn.classList.remove("hover:bg-primary-50", "hover:border-primary-300");
          });
          // Highlight correct and incorrect answers with animations
          allButtons.forEach(btn => {
            if (btn.textContent === correctAnswer) {
              btn.classList.add("bg-green-100", "border-green-500", "text-green-800");
              this.animateCorrectAnswer(btn);
            } else if (btn === selectedButton && !isCorrect) {
              btn.classList.add("bg-red-100", "border-red-500", "text-red-800");
              this.animateIncorrectAnswer(btn);
            }
          });
          // Show feedback message
          this.feedbackMessage.textContent = isCorrect ? "‚úÖ Correct!" : "‚ùå Wrong!";
          this.feedbackMessage.className = `text-lg font-semibold mb-2 ${isCorrect ? "text-green-600" : "text-red-600"}`;
          if (!isCorrect) {
            this.correctAnswer.textContent = `Correct answer: ${correctAnswer}`;
            this.correctAnswer.classList.remove("hidden");
          } else {
            this.correctAnswer.classList.add("hidden");
          }
          this.feedbackDisplay.classList.remove("hidden");
        }
        async nextQuestion() {
          try {
            const response = await fetch(`/api/quiz/${this.sessionId}/question`);
            if (!response.ok) {
              throw new Error("Failed to get next question");
            }
            const data = await response.json();
            if (data.completed) {
              if (data.isGameOver && data.gameOverReason === "no_hearts") {
                this.showGameOverModal();
              } else {
                this.showResults(data);
              }
            } else {
              this.currentQuestion = data.question;
              this.hearts = data.hearts;
              this.isGameOver = data.isGameOver;
              // Animate question transition
              this.animateQuestionTransition();
              // Display question after a short delay for smooth transition
              setTimeout(() => {
                this.displayQuestion();
              }, 200);
            }
          } catch (error) {
            console.error("Error getting next question:", error);
            alert("Failed to load next question. Please try again.");
          }
        }
        showResults(data) {
          this.quizInterface.classList.add("hidden");
          this.quizResults.classList.remove("hidden");
          const percentage = Math.round(data.finalScore / this.totalQuestions * 100);
          const heartsRemaining = data.heartsRemaining || this.hearts;
          this.finalScore.textContent = `Score: ${data.finalScore}/${this.totalQuestions}`;
          this.finalPercentage.textContent = `${percentage}% Correct ‚Ä¢ ${heartsRemaining} ‚ù§Ô∏è remaining`;
          // Update progress tracking
          this.updateProgress(this.quizType, data.finalScore, this.totalQuestions);
        }
        restartQuiz() {
          this.startQuiz(this.quizType);
        }
        switchMode() {
          this.quizInterface.classList.add("hidden");
          this.quizResults.classList.add("hidden");
          this.heroSection.classList.remove("hidden");
          this.aboutSection.classList.remove("hidden");
          this.progressSection.classList.remove("hidden");
          this.japaneseTeacherSection.classList.remove("hidden");
        }
        updateProgress(type, score, total) {
          const stats = this.getStoredStats();
          if (!stats[type]) {
            stats[type] = {
              quizzes: 0,
              totalQuestions: 0,
              totalCorrect: 0,
              bestScore: 0
            };
          }
          stats[type].quizzes++;
          stats[type].totalQuestions += total;
          stats[type].totalCorrect += score;
          stats[type].bestScore = Math.max(stats[type].bestScore, score);
          localStorage.setItem("japaneseQuizStats", JSON.stringify(stats));
          this.displayProgress();
        }
        getStoredStats() {
          const stored = localStorage.getItem("japaneseQuizStats");
          return stored ? JSON.parse(stored) : {
            hiragana: null,
            katakana: null
          };
        }
        loadProgress() {
          this.displayProgress();
        }
        displayProgress() {
          const stats = this.getStoredStats();
          // Update Hiragana progress
          if (stats.hiragana) {
            const hAccuracy = Math.round(stats.hiragana.totalCorrect / stats.hiragana.totalQuestions * 100);
            document.getElementById("hiragana-accuracy").textContent = `${hAccuracy}%`;
            document.getElementById("hiragana-progress-bar").style.width = `${hAccuracy}%`;
            document.getElementById("hiragana-quizzes").textContent = stats.hiragana.quizzes;
            document.getElementById("hiragana-best").textContent = stats.hiragana.bestScore;
          }
          // Update Katakana progress
          if (stats.katakana) {
            const kAccuracy = Math.round(stats.katakana.totalCorrect / stats.katakana.totalQuestions * 100);
            document.getElementById("katakana-accuracy").textContent = `${kAccuracy}%`;
            document.getElementById("katakana-progress-bar").style.width = `${kAccuracy}%`;
            document.getElementById("katakana-quizzes").textContent = stats.katakana.quizzes;
            document.getElementById("katakana-best").textContent = stats.katakana.bestScore;
          }
          // Update overall stats
          const totalQuestions = (stats.hiragana?.totalQuestions || 0) + (stats.katakana?.totalQuestions || 0);
          const totalCorrect = (stats.hiragana?.totalCorrect || 0) + (stats.katakana?.totalCorrect || 0);
          const overallAccuracy = totalQuestions > 0 ? Math.round(totalCorrect / totalQuestions * 100) : 0;
          document.getElementById("total-questions").textContent = totalQuestions;
          document.getElementById("total-correct").textContent = totalCorrect;
          document.getElementById("overall-accuracy").textContent = `${overallAccuracy}%`;
        }
        // Japanese Teacher Methods
        async submitJapaneseTeacher() {
          const input = this.japaneseInput.value.trim();
          if (!input) {
            this.showJapaneseError("Please enter a Japanese word or grammar pattern.");
            return;
          }
          this.setJapaneseLoading(true);
          this.hideJapaneseError();
          this.hideJapaneseResults();
          try {
            const response = await fetch("/api/japanese-teacher", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": this.csrfToken
              },
              body: JSON.stringify({
                input: input
              })
            });
            const data = await response.json();
            if (!response.ok) {
              throw new Error(data.error || "Failed to get explanation");
            }
            if (data.success && data.data) {
              this.displayJapaneseResults(data.data);
            } else {
              throw new Error("Invalid response format");
            }
          } catch (error) {
            console.error("Japanese Teacher Error:", error);
            this.showJapaneseError(error.message || "An error occurred. Please try again.");
          } finally {
            this.setJapaneseLoading(false);
          }
        }
        displayJapaneseResults(data) {
          // Populate desktop layout fields
          document.getElementById("result-input-desktop").textContent = data.input || "";
          document.getElementById("result-romaji-desktop").textContent = data.romaji || "";
          document.getElementById("result-furigana-desktop").textContent = data.furigana || "";
          document.getElementById("result-pronunciation-desktop").textContent = data.pronunciation_guide || "";
          document.getElementById("result-meaning-desktop").textContent = data.meaning_vietnamese || "";
          document.getElementById("result-example-jp-desktop").textContent = data.example_japanese || "";
          document.getElementById("result-example-vn-desktop").textContent = data.example_vietnamese || "";
          document.getElementById("result-note-desktop").textContent = data.note || "";
          // Populate mobile layout fields
          document.getElementById("result-input-mobile").textContent = data.input || "";
          document.getElementById("result-romaji-mobile").textContent = data.romaji || "";
          document.getElementById("result-furigana-mobile").textContent = data.furigana || "";
          document.getElementById("result-pronunciation-mobile").textContent = data.pronunciation_guide || "";
          document.getElementById("result-meaning-mobile").textContent = data.meaning_vietnamese || "";
          document.getElementById("result-example-jp-mobile").textContent = data.example_japanese || "";
          document.getElementById("result-example-vn-mobile").textContent = data.example_vietnamese || "";
          document.getElementById("result-note-mobile").textContent = data.note || "";
          // Initialize mobile swipe functionality
          this.initializeMobileSwipe();
          // Show results
          this.showJapaneseResults();
        }
        setJapaneseLoading(loading) {
          this.japaneseSubmit.disabled = loading;
          if (loading) {
            this.submitText.classList.add("hidden");
            this.submitLoading.classList.remove("hidden");
          } else {
            this.submitText.classList.remove("hidden");
            this.submitLoading.classList.add("hidden");
          }
        }
        showJapaneseError(message) {
          this.errorMessage.textContent = message;
          this.japaneseError.classList.remove("hidden");
        }
        hideJapaneseError() {
          this.japaneseError.classList.add("hidden");
        }
        showJapaneseResults() {
          this.japaneseResults.classList.remove("hidden");
        }
        hideJapaneseResults() {
          this.japaneseResults.classList.add("hidden");
        }
        // Mobile Swipe Navigation Methods
        initializeMobileSwipe() {
          this.currentSlide = 0;
          this.totalSlides = 6;
          this.swipeWrapper = document.getElementById("japanese-teacher-swipe-wrapper");
          this.progressBar = document.getElementById("japanese-teacher-progress-bar");
          this.prevButton = document.getElementById("japanese-teacher-prev");
          this.nextButton = document.getElementById("japanese-teacher-next");
          this.pagination = document.getElementById("japanese-teacher-pagination");
          if (!this.swipeWrapper) return;
          // Initialize touch events
          this.initializeTouchEvents();
          // Initialize navigation buttons
          this.initializeNavigationButtons();
          // Initialize pagination dots
          this.initializePaginationDots();
          // Initialize keyboard navigation
          this.initializeKeyboardNavigation();
          // Initialize responsive behavior
          this.initializeResponsiveBehavior();
          // Update initial state
          this.updateSwipeState();
        }
        initializeTouchEvents() {
          let startX = 0;
          let startY = 0;
          let currentX = 0;
          let currentY = 0;
          let isDragging = false;
          let startTime = 0;
          const handleTouchStart = e => {
            const touch = e.touches[0];
            startX = touch.clientX;
            startY = touch.clientY;
            startTime = Date.now();
            isDragging = true;
            this.swipeWrapper.style.transition = "none";
          };
          const handleTouchMove = e => {
            if (!isDragging) return;
            const touch = e.touches[0];
            currentX = touch.clientX;
            currentY = touch.clientY;
            const deltaX = currentX - startX;
            const deltaY = currentY - startY;
            // Prevent vertical scrolling if horizontal swipe is detected
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
              e.preventDefault();
              const currentTransform = -this.currentSlide * 100;
              const newTransform = currentTransform + deltaX / this.swipeWrapper.offsetWidth * 100;
              this.swipeWrapper.style.transform = `translateX(${newTransform}%)`;
            }
          };
          const handleTouchEnd = e => {
            if (!isDragging) return;
            isDragging = false;
            const deltaX = currentX - startX;
            const deltaY = currentY - startY;
            const deltaTime = Date.now() - startTime;
            const velocity = Math.abs(deltaX) / deltaTime;
            // Restore transition
            this.swipeWrapper.style.transition = "transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)";
            // Determine if swipe should trigger slide change
            const threshold = this.swipeWrapper.offsetWidth * .3;
            const shouldSwipe = Math.abs(deltaX) > threshold || velocity > .5;
            if (shouldSwipe && Math.abs(deltaX) > Math.abs(deltaY)) {
              if (deltaX > 0 && this.currentSlide > 0) {
                this.goToSlide(this.currentSlide - 1);
              } else if (deltaX < 0 && this.currentSlide < this.totalSlides - 1) {
                this.goToSlide(this.currentSlide + 1);
              } else {
                this.goToSlide(this.currentSlide);
              }
            } else {
              this.goToSlide(this.currentSlide);
            }
          };
          // Add touch event listeners
          this.swipeWrapper.addEventListener("touchstart", handleTouchStart, {
            passive: false
          });
          this.swipeWrapper.addEventListener("touchmove", handleTouchMove, {
            passive: false
          });
          this.swipeWrapper.addEventListener("touchend", handleTouchEnd);
        }
        initializeNavigationButtons() {
          if (this.prevButton) {
            this.prevButton.addEventListener("click", e => {
              this.animateButtonPress(e.target);
              this.previousSlide();
            });
          }
          if (this.nextButton) {
            this.nextButton.addEventListener("click", e => {
              this.animateButtonPress(e.target);
              this.nextSlide();
            });
          }
        }
        initializePaginationDots() {
          if (!this.pagination) return;
          const dots = this.pagination.querySelectorAll(".japanese-teacher-dot");
          dots.forEach((dot, index) => {
            dot.addEventListener("click", e => {
              this.animateButtonPress(e.target);
              this.goToSlide(index);
            });
          });
        }
        goToSlide(slideIndex) {
          if (slideIndex < 0 || slideIndex >= this.totalSlides) return;
          this.currentSlide = slideIndex;
          const translateX = -slideIndex * 100;
          this.swipeWrapper.style.transform = `translateX(${translateX}%)`;
          this.updateSwipeState();
        }
        nextSlide() {
          if (this.currentSlide < this.totalSlides - 1) {
            this.goToSlide(this.currentSlide + 1);
          }
        }
        previousSlide() {
          if (this.currentSlide > 0) {
            this.goToSlide(this.currentSlide - 1);
          }
        }
        updateSwipeState() {
          // Update progress bar
          const progress = (this.currentSlide + 1) / this.totalSlides * 100;
          if (this.progressBar) {
            this.progressBar.style.width = `${progress}%`;
            this.progressBar.setAttribute("aria-valuenow", this.currentSlide + 1);
          }
          // Update navigation buttons
          if (this.prevButton) {
            this.prevButton.disabled = this.currentSlide === 0;
            this.prevButton.style.opacity = this.currentSlide === 0 ? "0.5" : "1";
            this.prevButton.setAttribute("aria-disabled", this.currentSlide === 0);
          }
          if (this.nextButton) {
            this.nextButton.disabled = this.currentSlide === this.totalSlides - 1;
            this.nextButton.style.opacity = this.currentSlide === this.totalSlides - 1 ? "0.5" : "1";
            this.nextButton.setAttribute("aria-disabled", this.currentSlide === this.totalSlides - 1);
          }
          // Update pagination dots with ARIA attributes
          if (this.pagination) {
            const dots = this.pagination.querySelectorAll(".japanese-teacher-dot");
            dots.forEach((dot, index) => {
              if (index === this.currentSlide) {
                dot.classList.add("active");
                dot.setAttribute("aria-selected", "true");
                dot.setAttribute("tabindex", "0");
              } else {
                dot.classList.remove("active");
                dot.setAttribute("aria-selected", "false");
                dot.setAttribute("tabindex", "-1");
              }
            });
          }
          // Update slide visibility for screen readers
          const slides = this.swipeWrapper?.querySelectorAll(".japanese-teacher-slide");
          if (slides) {
            slides.forEach((slide, index) => {
              if (index === this.currentSlide) {
                slide.setAttribute("aria-hidden", "false");
                slide.setAttribute("tabindex", "0");
              } else {
                slide.setAttribute("aria-hidden", "true");
                slide.setAttribute("tabindex", "-1");
              }
            });
          }
        }
        initializeKeyboardNavigation() {
          // Add keyboard event listener for Japanese Teacher section
          const handleKeyDown = e => {
            // Only handle keyboard navigation when Japanese Teacher results are visible
            if (this.japaneseResults && !this.japaneseResults.classList.contains("hidden")) {
              // Check if we're on mobile layout
              const isMobile = window.innerWidth <= 768;
              if (!isMobile) return;
              switch (e.key) {
               case "ArrowLeft":
                e.preventDefault();
                this.previousSlide();
                break;
      
               case "ArrowRight":
                e.preventDefault();
                this.nextSlide();
                break;
      
               case "Home":
                e.preventDefault();
                this.goToSlide(0);
                break;
      
               case "End":
                e.preventDefault();
                this.goToSlide(this.totalSlides - 1);
                break;
      
               case "Escape":
                e.preventDefault();
                this.hideJapaneseResults();
                break;
              }
            }
          };
          // Add event listener to document
          document.addEventListener("keydown", handleKeyDown);
          // Store reference for cleanup if needed
          this.keyboardHandler = handleKeyDown;
        }
        initializeResponsiveBehavior() {
          // Handle window resize to ensure proper layout switching
          const handleResize = () => {
            const isMobile = window.innerWidth <= 768;
            // Reset mobile swipe state when switching to desktop
            if (!isMobile && this.swipeWrapper) {
              this.currentSlide = 0;
              this.swipeWrapper.style.transform = "translateX(0%)";
              this.updateSwipeState();
            }
          };
          // Add resize event listener
          window.addEventListener("resize", handleResize);
          // Store reference for cleanup if needed
          this.resizeHandler = handleResize;
        }
        // Enhanced method to check if mobile layout is active
        isMobileLayout() {
          return window.innerWidth <= 768;
        }
      }
      // Initialize the quiz when the page loads
      
      document.addEventListener("DOMContentLoaded", function() {
        new JapaneseQuiz();
      });
    </script>
  </body>
</html>
