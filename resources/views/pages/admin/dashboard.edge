<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content="{{ csrfToken }}" />
    <title>
      Admin Dashboard - TechVision Solutions
    </title>

    <link rel="preconnect" href="https://fonts.bunny.net" />
    <link href="https://fonts.bunny.net/css?family=inter:400,500,600,700" rel="stylesheet" />

    <script src="https://cdn.tailwindcss.com">

    </script>

    <script>
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: [ "Inter", "sans-serif" ]
            },
            colors: {
              primary: {
                DEFAULT: "#2563eb",
                50: "#eff6ff",
                100: "#dbeafe",
                500: "#3b82f6",
                600: "#2563eb",
                700: "#1d4ed8",
                900: "#1e3a8a"
              }
            }
          }
        }
      };
    </script>

    @vite(['resources/css/app.css', 'resources/js/app.js'])
    @stack('dumper')
  </head>
  <body class="min-h-screen bg-gray-50 font-sans">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <a href="/" class="text-2xl font-bold text-primary-600">TechVision</a>
            </div>
          </div>
          <div class="hidden md:block">
            <div class="ml-10 flex items-baseline space-x-4">
              <a href="/" class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium">Home</a>
              <a
                href="/#about"
                class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium"
              >About</a>
              <a
                href="/#culture"
                class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium"
              >Culture</a>
              <a href="/careers" class="text-gray-600 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium">Careers</a>
              <a href="/admin" class="text-primary-600 bg-primary-50 px-3 py-2 rounded-md text-sm font-medium">Admin</a>
            </div>
          </div>
        </div>
      </div>
    </nav>

    <!-- Hero Section -->
    <div class="bg-gradient-to-br from-primary-50 to-blue-100">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <div class="text-center">
          <h1 class="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
            Admin
            <span class="text-primary-600">Dashboard</span>
          </h1>
          <p class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            Manage jobs, review applicants, and configure AI evaluation criteria.
            Your central hub for HR management and recruitment oversight.
          </p>
        </div>
      </div>
    </div>

    <!-- Admin Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <!-- Tab Navigation -->
      <div class="border-b border-gray-200 mb-8">
        <nav class="-mb-px flex space-x-8">
          <button
            id="jobs-tab"
            class="tab-button border-b-2 border-primary-500 text-primary-600 py-2 px-1 text-sm font-medium"
            onclick="switchTab('jobs')"
          >
            Jobs Management
          </button>
          <button
            id="applicants-tab"
            class="tab-button border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-2 px-1 text-sm font-medium"
            onclick="switchTab('applicants')"
          >
            Applicants Management
          </button>
          <button
            id="criteria-tab"
            class="tab-button border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-2 px-1 text-sm font-medium"
            onclick="switchTab('criteria')"
          >
            AI Criteria Management
          </button>
        </nav>
      </div>

      <!-- Tab Content -->
      <div id="tab-content">
        <!-- Jobs Management Tab -->
        <div id="jobs-content" class="tab-content">
          <div class="mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Jobs Management</h2>
            <p class="text-gray-600">Manage job postings and their status</p>
          </div>

          <div id="jobs-loading" class="text-center py-16">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
            <p class="text-gray-600 mt-4">Loading jobs...</p>
          </div>

          <div id="jobs-list" class="hidden grid gap-6 md:gap-8"></div>
        </div>

        <!-- Applicants Management Tab -->
        <div id="applicants-content" class="tab-content hidden">
          <div class="mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Applicants Management</h2>
            <p class="text-gray-600">Review and manage job applications</p>
          </div>

          <!-- Filters -->
          <div class="mb-8 bg-white rounded-lg shadow-sm border p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Filter Applications</h3>
            <div class="flex flex-wrap gap-4">
              <div>
                <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select id="status-filter" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500">
                  <option value="">All Statuses</option>
                  <option value="pending">Pending</option>
                  <option value="reviewed">Reviewed</option>
                  <option value="accepted">Accepted</option>
                  <option value="rejected">Rejected</option>
                </select>
              </div>
              <div>
                <label for="job-filter" class="block text-sm font-medium text-gray-700 mb-1">Job Position</label>
                <select id="job-filter" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500">
                  <option value="">All Jobs</option>
                </select>
              </div>
              <div class="flex items-end">
                <button onclick="loadApplicants()" class="bg-primary-600 text-white px-6 py-2 rounded-md text-sm font-semibold hover:bg-primary-700 transition duration-200">
                  Apply Filters
                </button>
              </div>
            </div>
          </div>

          <div id="applicants-loading" class="text-center py-16">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
            <p class="text-gray-600 mt-4">Loading applicants...</p>
          </div>

          <div id="applicants-list" class="hidden grid gap-6 md:gap-8"></div>
        </div>

        <!-- AI Criteria Management Tab -->
        <div id="criteria-content" class="tab-content hidden">
          <div class="mb-8 flex justify-between items-end">
            <div>
              <h2 class="text-2xl font-bold text-gray-900 mb-2">AI Criteria Management</h2>
              <p class="text-gray-600">Configure AI evaluation criteria and weights</p>
            </div>
            <button
              onclick="showCriteriaModal()"
              class="bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-700 transition duration-200"
            >
              Add New Criteria
            </button>
          </div>

          <div id="criteria-loading" class="text-center py-16">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
            <p class="text-gray-600 mt-4">Loading criteria...</p>
          </div>

          <div id="criteria-list" class="hidden"></div>
        </div>
      </div>
    </div>

    <!-- Criteria Modal -->
    <div id="criteria-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
      <div class="bg-white rounded-lg max-w-md w-full mx-4 shadow-xl">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 id="modal-title" class="text-lg font-semibold text-gray-900">Add New Criteria</h3>
        </div>
        <form id="criteria-form" class="p-6">
          <div class="mb-4">
            <label for="criteria-name" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
            <input
              type="text"
              id="criteria-name"
              name="name"
              required
              class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            />
          </div>
          <div class="mb-4">
            <label for="criteria-weight" class="block text-sm font-medium text-gray-700 mb-2">Weight (0.0 - 1.0)</label>
            <input
              type="number"
              id="criteria-weight"
              name="weight"
              step="0.01"
              min="0"
              max="1"
              required
              class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            />
            <p id="weight-info" class="text-xs text-gray-500 mt-1"></p>
          </div>
          <div class="mb-6">
            <label for="criteria-description" class="block text-sm font-medium text-gray-700 mb-2">Description (Optional)</label>
            <textarea
              id="criteria-description"
              name="description"
              rows="3"
              class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            ></textarea>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="hideCriteriaModal()"
              class="px-6 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition duration-200"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-6 py-2 text-sm text-white bg-primary-600 rounded-lg hover:bg-primary-700 transition duration-200 font-semibold"
            >
              Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gray-900 text-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div class="col-span-1 md:col-span-2">
            <h3 class="text-2xl font-bold mb-4">
              TechVision Solutions
            </h3>
            <p class="text-gray-300 mb-4">
              Building tomorrow's technology today. Join us in creating innovative solutions
              that make a difference in the world.
            </p>
          </div>

          <div>
            <h4 class="text-lg font-semibold mb-4">
              Company
            </h4>
            <ul class="space-y-2 text-gray-300">
              <li>
                <a href="/#about" class="hover:text-white">About Us</a>
              </li>
              <li>
                <a href="/#culture" class="hover:text-white">Culture</a>
              </li>
              <li>
                <a href="/careers" class="hover:text-white">Careers</a>
              </li>
              <li>
                <a href="#" class="hover:text-white">Contact</a>
              </li>
            </ul>
          </div>

          <div>
            <h4 class="text-lg font-semibold mb-4">
              Connect
            </h4>
            <ul class="space-y-2 text-gray-300">
              <li>
                <a href="#" class="hover:text-white">LinkedIn</a>
              </li>
              <li>
                <a href="#" class="hover:text-white">Twitter</a>
              </li>
              <li>
                <a href="#" class="hover:text-white">GitHub</a>
              </li>
            </ul>
          </div>
        </div>

        <div class="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
          <p>
            &copy; 2024 TechVision Solutions. All rights reserved.
          </p>
        </div>
      </div>
    </footer>

    <!-- Toast Notifications Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
      <div class="bg-white rounded-lg p-6 flex items-center space-x-3 shadow-xl">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600"></div>
        <span class="text-gray-700">Loading...</span>
      </div>
    </div>
  </body>
</html>
@endsection

<script>
  // Global admin utilities
  window.AdminUtils = {
    // Show loading overlay
    showLoading() {
      document.getElementById('loading-overlay').classList.remove('hidden');
      document.getElementById('loading-overlay').classList.add('flex');
    },

    // Hide loading overlay
    hideLoading() {
      document.getElementById('loading-overlay').classList.add('hidden');
      document.getElementById('loading-overlay').classList.remove('flex');
    },

    // Show toast notification
    showToast(message, type = 'success') {
      const toast = document.createElement('div');
      const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';

      toast.className = `${bgColor} text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full opacity-0`;
      toast.textContent = message;

      document.getElementById('toast-container').appendChild(toast);

      // Animate in
      setTimeout(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
      }, 100);

      // Auto remove after 5 seconds
      setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }, 5000);
    },

    // API helper with CSRF token
    async apiCall(url, options = {}) {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

      const defaultOptions = {
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-TOKEN': csrfToken,
          ...options.headers
        }
      };

      return fetch(url, { ...defaultOptions, ...options });
    }
  };

  // Global state
  let currentTab = 'jobs';
  let currentCriteriaId = null;
  let jobsData = [];
  let applicantsData = [];
  let criteriaData = [];

  // Tab switching functionality
  function switchTab(tabName) {
    // Update tab buttons
    document.querySelectorAll('.tab-button').forEach(btn => {
      btn.classList.remove('border-primary-500', 'text-primary-600');
      btn.classList.add('border-transparent', 'text-gray-500');
    });

    document.getElementById(`${tabName}-tab`).classList.remove('border-transparent', 'text-gray-500');
    document.getElementById(`${tabName}-tab`).classList.add('border-primary-500', 'text-primary-600');

    // Update tab content
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.add('hidden');
    });

    document.getElementById(`${tabName}-content`).classList.remove('hidden');
    currentTab = tabName;

    // Load data for the active tab
    if (tabName === 'jobs' && jobsData.length === 0) {
      loadJobs();
    } else if (tabName === 'applicants' && applicantsData.length === 0) {
      loadApplicants();
      loadJobsForFilter();
    } else if (tabName === 'criteria' && criteriaData.length === 0) {
      loadCriteria();
    }
  }

  // Load jobs data
  async function loadJobs() {
    try {
      document.getElementById('jobs-loading').classList.remove('hidden');
      document.getElementById('jobs-list').classList.add('hidden');

      const response = await AdminUtils.apiCall('/api/admin/jobs');
      const result = await response.json();

      if (result.success) {
        jobsData = result.data;
        renderJobs();
      } else {
        AdminUtils.showToast('Failed to load jobs', 'error');
      }
    } catch (error) {
      AdminUtils.showToast('Error loading jobs', 'error');
    } finally {
      document.getElementById('jobs-loading').classList.add('hidden');
      document.getElementById('jobs-list').classList.remove('hidden');
    }
  }

  // Render jobs list
  function renderJobs() {
    const container = document.getElementById('jobs-list');

    if (jobsData.length === 0) {
      container.innerHTML = `
        <div class="text-center py-16">
          <div class="max-w-md mx-auto">
            <svg
              class="mx-auto h-12 w-12 text-gray-400 mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 01-2 2H10a2 2 0 01-2-2V6m8 0H8"
              />
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">
              No Jobs Found
            </h3>
            <p class="text-gray-600">
              No job postings are currently available in the system.
            </p>
          </div>
        </div>
      `;
      return;
    }

    const jobsHtml = jobsData.map(job => `
      <div class="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow duration-200">
        <div class="p-6 md:p-8">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between">
            <div class="flex-1">
              <h2 class="text-2xl font-bold text-gray-900 mb-2">
                ${job.jobTitle}
              </h2>

              <div class="flex flex-wrap gap-4 text-sm text-gray-600 mb-4">
                ${job.workLocation ? `
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                    </svg>
                    ${job.workLocation}
                  </span>
                ` : ''}

                ${job.workingTime ? `
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    ${job.workingTime}
                  </span>
                ` : ''}

                ${job.salaryRange ? `
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                    </svg>
                    ${job.salaryRange}
                  </span>
                ` : ''}

                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                  </svg>
                  ${job.$extras.cv_submissions_count || 0} applications
                </span>
              </div>

              ${job.requirements ? `
                <p class="text-gray-600 mb-4 line-clamp-3">
                  ${job.requirements.substring(0, 200)}${job.requirements.length > 200 ? '...' : ''}
                </p>
              ` : ''}
            </div>

            <div class="mt-4 md:mt-0 md:ml-6 flex flex-col items-end space-y-3">
              <span class="px-3 py-1 text-sm rounded-full font-medium ${job.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                ${job.isActive ? 'Active' : 'Inactive'}
              </span>
              <button
                onclick="toggleJobStatus(${job.id}, ${!job.isActive})"
                class="px-6 py-2 rounded-lg font-semibold transition duration-200 ${job.isActive ? 'bg-red-100 text-red-700 hover:bg-red-200' : 'bg-green-100 text-green-700 hover:bg-green-200'}"
              >
                ${job.isActive ? 'Deactivate' : 'Activate'}
              </button>
            </div>
          </div>
        </div>
      </div>
    `).join('');

    container.innerHTML = jobsHtml;
  }

  // Toggle job status
  async function toggleJobStatus(jobId, isActive) {
    try {
      AdminUtils.showLoading();

      const response = await AdminUtils.apiCall(`/api/admin/jobs/${jobId}/status`, {
        method: 'PUT',
        body: JSON.stringify({ isActive })
      });

      const result = await response.json();

      if (result.success) {
        AdminUtils.showToast(`Job ${isActive ? 'activated' : 'deactivated'} successfully`);
        loadJobs(); // Reload jobs
      } else {
        AdminUtils.showToast(result.message || 'Failed to update job status', 'error');
      }
    } catch (error) {
      AdminUtils.showToast('Error updating job status', 'error');
    } finally {
      AdminUtils.hideLoading();
    }
  }

  // Load applicants data
  async function loadApplicants() {
    try {
      document.getElementById('applicants-loading').classList.remove('hidden');
      document.getElementById('applicants-list').classList.add('hidden');

      const statusFilter = document.getElementById('status-filter').value;
      const jobFilter = document.getElementById('job-filter').value;

      const params = new URLSearchParams();
      if (statusFilter) params.append('status', statusFilter);
      if (jobFilter) params.append('job_id', jobFilter);

      const response = await AdminUtils.apiCall(`/api/admin/applicants?${params}`);
      const result = await response.json();

      if (result.success) {
        applicantsData = result.data.data; // Paginated response
        renderApplicants();
      } else {
        AdminUtils.showToast('Failed to load applicants', 'error');
      }
    } catch (error) {
      AdminUtils.showToast('Error loading applicants', 'error');
    } finally {
      document.getElementById('applicants-loading').classList.add('hidden');
      document.getElementById('applicants-list').classList.remove('hidden');
    }
  }

  // Render applicants list
  function renderApplicants() {
    const container = document.getElementById('applicants-list');

    if (applicantsData.length === 0) {
      container.innerHTML = `
        <div class="text-center py-16">
          <div class="max-w-md mx-auto">
            <svg
              class="mx-auto h-12 w-12 text-gray-400 mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
              />
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">
              No Applicants Found
            </h3>
            <p class="text-gray-600">
              No job applications match the current filters.
            </p>
          </div>
        </div>
      `;
      return;
    }

    const getStatusColor = (status) => {
      switch(status) {
        case 'accepted': return 'bg-green-100 text-green-800';
        case 'rejected': return 'bg-red-100 text-red-800';
        case 'reviewed': return 'bg-blue-100 text-blue-800';
        default: return 'bg-yellow-100 text-yellow-800';
      }
    };

    const applicantsHtml = applicantsData.map(applicant => `
      <div class="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow duration-200">
        <div class="p-6 md:p-8">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between">
            <div class="flex-1">
              <h2 class="text-2xl font-bold text-gray-900 mb-2">
                ${applicant.applicantName || 'Unknown Applicant'}
              </h2>

              <div class="flex flex-wrap gap-4 text-sm text-gray-600 mb-4">
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                  </svg>
                  ${applicant.applicantEmail || 'No email provided'}
                </span>

                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 01-2 2H10a2 2 0 01-2-2V6m8 0H8"/>
                  </svg>
                  ${applicant.job?.jobTitle || 'No job specified'}
                </span>

                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a2 2 0 012-2h4a2 2 0 012 2v4m-6 0h6m-6 0l-2 9a2 2 0 002 2h8a2 2 0 002-2l-2-9m-6 0V7"/>
                  </svg>
                  Applied ${new Date(applicant.createdAt).toLocaleDateString()}
                </span>
              </div>

              <div class="text-sm text-gray-600">
                ${applicant.questionnaireResponse?.isCompleted ?
                  `<p class="flex items-center"><svg class="w-4 h-4 mr-1 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg><strong>Assessment Score:</strong> ${applicant.questionnaireResponse.totalScore || 'N/A'}</p>` :
                  '<p class="flex items-center"><svg class="w-4 h-4 mr-1 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg><strong>Assessment:</strong> Not completed</p>'
                }
              </div>
            </div>

            <div class="mt-4 md:mt-0 md:ml-6 flex flex-col items-end space-y-3">
              <span class="px-3 py-1 text-sm rounded-full font-medium ${getStatusColor(applicant.status)}">
                ${applicant.status.charAt(0).toUpperCase() + applicant.status.slice(1)}
              </span>
              <select
                onchange="updateApplicantStatus(${applicant.id}, this.value)"
                class="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              >
                <option value="pending" ${applicant.status === 'pending' ? 'selected' : ''}>Pending</option>
                <option value="reviewed" ${applicant.status === 'reviewed' ? 'selected' : ''}>Reviewed</option>
                <option value="accepted" ${applicant.status === 'accepted' ? 'selected' : ''}>Accepted</option>
                <option value="rejected" ${applicant.status === 'rejected' ? 'selected' : ''}>Rejected</option>
              </select>
            </div>
          </div>
        </div>
      </div>
    `).join('');

    container.innerHTML = applicantsHtml;
  }

  // Update applicant status
  async function updateApplicantStatus(applicantId, status) {
    try {
      AdminUtils.showLoading();

      const response = await AdminUtils.apiCall(`/api/admin/applicants/${applicantId}/status`, {
        method: 'PUT',
        body: JSON.stringify({ status })
      });

      const result = await response.json();

      if (result.success) {
        AdminUtils.showToast('Applicant status updated successfully');
      } else {
        AdminUtils.showToast(result.message || 'Failed to update applicant status', 'error');
        loadApplicants(); // Reload to reset the dropdown
      }
    } catch (error) {
      AdminUtils.showToast('Error updating applicant status', 'error');
      loadApplicants(); // Reload to reset the dropdown
    } finally {
      AdminUtils.hideLoading();
    }
  }

  // Load jobs for filter dropdown
  async function loadJobsForFilter() {
    try {
      const response = await AdminUtils.apiCall('/api/admin/jobs');
      const result = await response.json();

      if (result.success) {
        const jobFilter = document.getElementById('job-filter');
        const options = result.data.map(job =>
          `<option value="${job.id}">${job.jobTitle}</option>`
        ).join('');

        jobFilter.innerHTML = '<option value="">All Jobs</option>' + options;
      }
    } catch (error) {
      console.error('Error loading jobs for filter:', error);
    }
  }

  // Load criteria data
  async function loadCriteria() {
    try {
      document.getElementById('criteria-loading').classList.remove('hidden');
      document.getElementById('criteria-list').classList.add('hidden');

      const response = await AdminUtils.apiCall('/api/admin/criteria');
      const result = await response.json();

      if (result.success) {
        criteriaData = result.data;
        renderCriteria();
      } else {
        AdminUtils.showToast('Failed to load criteria', 'error');
      }
    } catch (error) {
      AdminUtils.showToast('Error loading criteria', 'error');
    } finally {
      document.getElementById('criteria-loading').classList.add('hidden');
      document.getElementById('criteria-list').classList.remove('hidden');
    }
  }

  // Render criteria list
  function renderCriteria() {
    const container = document.getElementById('criteria-list');

    if (criteriaData.length === 0) {
      container.innerHTML = `
        <div class="text-center py-16">
          <div class="max-w-md mx-auto">
            <svg
              class="mx-auto h-12 w-12 text-gray-400 mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"
              />
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">
              No Criteria Found
            </h3>
            <p class="text-gray-600 mb-6">
              No AI evaluation criteria have been configured yet.
              Add your first criteria to get started.
            </p>
            <button
              onclick="showCriteriaModal()"
              class="inline-block bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-700 transition duration-200"
            >
              Add First Criteria
            </button>
          </div>
        </div>
      `;
      return;
    }

    const totalWeight = criteriaData.filter(c => c.isActive).reduce((sum, c) => sum + Number.parseFloat(c.weight), 0);

    const criteriaHtml = `
      <div class="mb-8 bg-white rounded-lg shadow-sm border p-6">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-lg font-semibold text-gray-900">Weight Summary</h3>
            <p class="text-sm text-gray-600 mt-1">Total weight allocation for AI evaluation</p>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold ${totalWeight > 1 ? 'text-red-600' : totalWeight === 1 ? 'text-green-600' : 'text-blue-600'}">
              ${totalWeight.toFixed(2)} / 1.00
            </div>
            ${totalWeight > 1 ? '<p class="text-sm text-red-600 font-medium">Exceeds limit!</p>' :
              totalWeight === 1 ? '<p class="text-sm text-green-600 font-medium">Perfect balance</p>' :
              `<p class="text-sm text-blue-600 font-medium">${(1 - totalWeight).toFixed(2)} remaining</p>`
            }
          </div>
        </div>
        <div class="mt-4">
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div class="h-2 rounded-full transition-all duration-300 ${totalWeight > 1 ? 'bg-red-500' : totalWeight === 1 ? 'bg-green-500' : 'bg-blue-500'}" style="width: ${Math.min(totalWeight * 100, 100)}%"></div>
          </div>
        </div>
      </div>

      <div class="grid gap-6 md:gap-8">
        ${criteriaData.map(criteria => `
          <div class="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow duration-200">
            <div class="p-6 md:p-8">
              <div class="flex flex-col md:flex-row md:items-center md:justify-between">
                <div class="flex-1">
                  <h2 class="text-2xl font-bold text-gray-900 mb-2">
                    ${criteria.name}
                  </h2>

                  <div class="flex flex-wrap gap-4 text-sm text-gray-600 mb-4">
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3"/>
                      </svg>
                      Weight: ${criteria.weight}
                    </span>

                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                      </svg>
                      ${criteria.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </div>

                  ${criteria.description ? `
                    <p class="text-gray-600 mb-4">
                      ${criteria.description}
                    </p>
                  ` : ''}
                </div>

                <div class="mt-4 md:mt-0 md:ml-6 flex flex-col items-end space-y-3">
                  <div class="flex space-x-2">
                    <button
                      onclick="editCriteria(${criteria.id})"
                      class="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition duration-200 font-medium"
                    >
                      Edit
                    </button>
                    <button
                      onclick="deleteCriteria(${criteria.id})"
                      class="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition duration-200 font-medium"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `).join('')}
      </div>
    `;

    container.innerHTML = criteriaHtml;
  }

  // Show criteria modal
  function showCriteriaModal(criteriaId = null) {
    currentCriteriaId = criteriaId;
    const modal = document.getElementById('criteria-modal');
    const form = document.getElementById('criteria-form');
    const title = document.getElementById('modal-title');

    if (criteriaId) {
      const criteria = criteriaData.find(c => c.id === criteriaId);
      title.textContent = 'Edit Criteria';
      document.getElementById('criteria-name').value = criteria.name;
      document.getElementById('criteria-weight').value = criteria.weight;
      document.getElementById('criteria-description').value = criteria.description || '';
    } else {
      title.textContent = 'Add New Criteria';
      form.reset();
    }

    updateWeightInfo();
    modal.classList.remove('hidden');
    modal.classList.add('flex');
  }

  // Hide criteria modal
  function hideCriteriaModal() {
    document.getElementById('criteria-modal').classList.add('hidden');
    document.getElementById('criteria-modal').classList.remove('flex');
    currentCriteriaId = null;
  }

  // Edit criteria
  function editCriteria(criteriaId) {
    showCriteriaModal(criteriaId);
  }

  // Delete criteria
  async function deleteCriteria(criteriaId) {
    if (!confirm('Are you sure you want to delete this criteria?')) {
      return;
    }

    try {
      AdminUtils.showLoading();

      const response = await AdminUtils.apiCall(`/api/admin/criteria/${criteriaId}`, {
        method: 'DELETE'
      });

      const result = await response.json();

      if (result.success) {
        AdminUtils.showToast('Criteria deleted successfully');
        loadCriteria();
      } else {
        AdminUtils.showToast(result.message || 'Failed to delete criteria', 'error');
      }
    } catch (error) {
      AdminUtils.showToast('Error deleting criteria', 'error');
    } finally {
      AdminUtils.hideLoading();
    }
  }

  // Update weight info
  function updateWeightInfo() {
    const currentWeight = parseFloat(document.getElementById('criteria-weight').value) || 0;
    const totalWeight = criteriaData
      .filter(c => c.isActive && (!currentCriteriaId || c.id !== currentCriteriaId))
      .reduce((sum, c) => sum + parseFloat(c.weight), 0);

    const remaining = 1.0 - totalWeight;
    const infoElement = document.getElementById('weight-info');

    if (currentWeight > remaining) {
      infoElement.textContent = `Exceeds available weight! Available: ${remaining.toFixed(2)}`;
      infoElement.className = 'text-xs text-red-500 mt-1';
    } else {
      infoElement.textContent = `Available weight: ${remaining.toFixed(2)}`;
      infoElement.className = 'text-xs text-gray-500 mt-1';
    }
  }

  // Handle criteria form submission
  document.getElementById('criteria-form').addEventListener('submit', async function(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = {
      name: formData.get('name'),
      weight: parseFloat(formData.get('weight')),
      description: formData.get('description') || null
    };

    try {
      AdminUtils.showLoading();

      const url = currentCriteriaId
        ? `/api/admin/criteria/${currentCriteriaId}`
        : '/api/admin/criteria';

      const method = currentCriteriaId ? 'PUT' : 'POST';

      const response = await AdminUtils.apiCall(url, {
        method,
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (result.success) {
        AdminUtils.showToast(result.message || 'Criteria saved successfully');
        hideCriteriaModal();
        loadCriteria();
      } else {
        AdminUtils.showToast(result.message || 'Failed to save criteria', 'error');
      }
    } catch (error) {
      AdminUtils.showToast('Error saving criteria', 'error');
    } finally {
      AdminUtils.hideLoading();
    }
  });

  // Add event listener for weight input
  document.getElementById('criteria-weight').addEventListener('input', updateWeightInfo);

  // Initialize the dashboard
  document.addEventListener('DOMContentLoaded', function() {
    // Load initial tab data
    loadJobs();
  });
</script>
