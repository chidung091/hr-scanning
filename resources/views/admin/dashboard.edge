<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content="{{ csrfToken }}" />
    <title>
      Admin Dashboard - TechVision Solutions
    </title>

    <link rel="preconnect" href="https://fonts.bunny.net" />
    <link href="https://fonts.bunny.net/css?family=inter:400,500,600,700" rel="stylesheet" />

    <script src="https://cdn.tailwindcss.com">

    </script>

    <script>
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: [ "Inter", "sans-serif" ]
            },
            colors: {
              primary: {
                DEFAULT: "#2563eb",
                50: "#eff6ff",
                100: "#dbeafe",
                500: "#3b82f6",
                600: "#2563eb",
                700: "#1d4ed8",
                900: "#1e3a8a"
              }
            }
          }
        }
      };
    </script>

    @vite(['resources/css/app.css', 'resources/js/app.js'])
  </head>
  <body class="min-h-screen bg-gray-50 font-sans">
    <!-- Navigation Header -->
    <nav class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <h1 class="text-xl font-bold text-primary-600">
                TechVision Admin
              </h1>
            </div>
          </div>

          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-600">
              Welcome, {{ session.get('admin_username', 'Admin') }}
            </span>
            <a
              href="/admin/logout"
              class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                />
              </svg>
              Logout
            </a>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <!-- Flash Messages -->
      @if(flashMessages.has('error'))
        <div class="mb-4 rounded-md bg-red-50 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clip-rule="evenodd"
                />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-red-800">
                {{ flashMessages.get('error') }}
              </p>
            </div>
          </div>
        </div>
      @endif

      @if(flashMessages.has('success'))
        <div class="mb-4 rounded-md bg-green-50 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                  clip-rule="evenodd"
                />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-green-800">
                {{ flashMessages.get('success') }}
              </p>
            </div>
          </div>
        </div>
      @endif

      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">
          Admin Dashboard
        </h1>
        <p class="mt-2 text-gray-600">
          Manage jobs, applicants, and AI evaluation criteria
        </p>
      </div>

      <!-- Tab Navigation -->
      <div class="mb-6">
        <div class="border-b border-gray-200">
          <nav class="-mb-px flex space-x-8" aria-label="Tabs">
            <a
              href="/admin?tab=jobs"
              class="tab-link {{ activeTab === 'jobs' ? 'border-primary-500 text-primary-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300' }} whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm"
            >
              <svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 01-2 2H10a2 2 0 01-2-2V6"
                />
              </svg>
              Jobs Management
            </a>
            <a
              href="/admin?tab=applicants"
              class="tab-link {{ activeTab === 'applicants' ? 'border-primary-500 text-primary-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300' }} whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm"
            >
              <svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                />
              </svg>
              Applicants Management
            </a>
            <a
              href="/admin?tab=criteria"
              class="tab-link {{ activeTab === 'criteria' ? 'border-primary-500 text-primary-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300' }} whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm"
            >
              <svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                />
              </svg>
              AI Criteria
            </a>
          </nav>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="bg-white shadow rounded-lg">
        <!-- Jobs Management Tab -->
        @if(activeTab === 'jobs')
          <div class="p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-lg font-medium text-gray-900">Jobs Management</h2>
              <button
                id="add-job-btn"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Add New Job
              </button>
            </div>

            <!-- Search and Filters -->
            <div class="mb-4">
              <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                  <input
                    type="text"
                    id="jobs-search"
                    placeholder="Search jobs..."
                    class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  />
                </div>
                <div class="flex gap-2">
                  <select
                    id="jobs-status-filter"
                    class="block px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  >
                    <option value="">All Status</option>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Jobs Table -->
            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
              <table class="min-w-full divide-y divide-gray-300">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Job Title
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Location
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Employees Needed
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Applications
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody id="jobs-table-body" class="bg-white divide-y divide-gray-200">
                  <!-- Jobs will be loaded here via JavaScript -->
                </tbody>
              </table>
            </div>

            <!-- Pagination -->
            <div id="jobs-pagination" class="mt-4">
              <!-- Pagination will be loaded here via JavaScript -->
            </div>
          </div>
        @endif

        <!-- Applicants Management Tab -->
        @if(activeTab === 'applicants')
          <div class="p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-lg font-medium text-gray-900">Applicants Management</h2>
            </div>

            <!-- Search and Filters -->
            <div class="mb-4">
              <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                  <input
                    type="text"
                    id="applicants-search"
                    placeholder="Search applicants..."
                    class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  />
                </div>
                <div class="flex gap-2">
                  <select
                    id="applicants-status-filter"
                    class="block px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  >
                    <option value="">All Status</option>
                    <option value="pending">Pending</option>
                    <option value="reviewed">Reviewed</option>
                    <option value="accepted">Accepted</option>
                    <option value="rejected">Rejected</option>
                  </select>
                  <select
                    id="applicants-job-filter"
                    class="block px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  >
                    <option value="">All Jobs</option>
                    <!-- Job options will be loaded via JavaScript -->
                  </select>
                </div>
              </div>
            </div>

            <!-- Applicants Table -->
            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
              <table class="min-w-full divide-y divide-gray-300">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Applicant
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Job Applied
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Assessment Score
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Applied Date
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody id="applicants-table-body" class="bg-white divide-y divide-gray-200">
                  <!-- Applicants will be loaded here via JavaScript -->
                </tbody>
              </table>
            </div>

            <!-- Pagination -->
            <div id="applicants-pagination" class="mt-4">
              <!-- Pagination will be loaded here via JavaScript -->
            </div>
          </div>
        @endif

        <!-- AI Criteria Management Tab -->
        @if(activeTab === 'criteria')
          <div class="p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-lg font-medium text-gray-900">AI Evaluation Criteria</h2>
              <button
                id="add-criteria-btn"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Add New Criteria
              </button>
            </div>

            <!-- Weight Summary -->
            <div class="mb-6 p-4 bg-blue-50 rounded-lg">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="text-sm font-medium text-blue-900">Total Weight</h3>
                  <p class="text-xs text-blue-700">The sum of all criteria weights should equal 1.0 (100%)</p>
                </div>
                <div class="text-right">
                  <span id="total-weight" class="text-2xl font-bold text-blue-900">0.00</span>
                  <span class="text-sm text-blue-700">/ 1.00</span>
                </div>
              </div>
              <div class="mt-2">
                <div class="w-full bg-blue-200 rounded-full h-2">
                  <div id="weight-progress" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
              </div>
            </div>

            <!-- Criteria Table -->
            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
              <table class="min-w-full divide-y divide-gray-300">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Criteria Name
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Weight
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Description
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Sort Order
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody id="criteria-table-body" class="bg-white divide-y divide-gray-200">
                  <!-- Criteria will be loaded here via JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
        @endif

        <!-- Loading State -->
        <div id="loading-state" class="hidden p-6 text-center">
          <div class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading...
          </div>
        </div>
      </div>
    </div>

    <!-- JavaScript for dynamic functionality -->
    <script>
      // Basic tab functionality and API calls will be added here
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Admin dashboard loaded');
        console.log('Active tab:', '{{ activeTab }}');

        // Load initial data based on active tab
        const activeTab = '{{ activeTab }}';
        if (activeTab === 'jobs') {
          loadJobs();
          setupJobsSearch();
        } else if (activeTab === 'applicants') {
          loadApplicants();
        } else if (activeTab === 'criteria') {
          loadCriteria();
        }
      });

      // API functions for loading data
      async function loadJobs() {
        console.log('Loading jobs...');
        showLoading();

        try {
          const response = await fetch('/api/admin/jobs', {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();

          if (result.success) {
            populateJobsTable(result.data.jobs);
            updateJobsPagination(result.data.pagination);
          } else {
            showError('Failed to load jobs data');
          }
        } catch (error) {
          console.error('Error loading jobs:', error);
          showError('Error loading jobs: ' + error.message);
        } finally {
          hideLoading();
        }
      }

      function populateJobsTable(jobs) {
        const tableBody = document.getElementById('jobs-table-body');
        if (!tableBody) return;

        if (jobs.length === 0) {
          tableBody.innerHTML = `
            <tr>
              <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                No jobs found
              </td>
            </tr>
          `;
          return;
        }

        tableBody.innerHTML = jobs.map(job => `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">${escapeHtml(job.jobTitle)}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">${escapeHtml(job.workLocation || 'Not specified')}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">${job.numberOfEmployees}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${job.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                ${job.isActive ? 'Active' : 'Inactive'}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">-</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <button
                onclick="toggleJobStatus(${job.id}, ${!job.isActive})"
                class="text-primary-600 hover:text-primary-900 mr-3"
              >
                ${job.isActive ? 'Deactivate' : 'Activate'}
              </button>
              <button
                onclick="viewJob(${job.id})"
                class="text-primary-600 hover:text-primary-900"
              >
                View
              </button>
            </td>
          </tr>
        `).join('');
      }

      function updateJobsPagination(pagination) {
        const paginationContainer = document.getElementById('jobs-pagination');
        if (!paginationContainer || !pagination) return;

        if (pagination.lastPage <= 1) {
          paginationContainer.innerHTML = '';
          return;
        }

        let paginationHtml = '<div class="flex items-center justify-between">';
        paginationHtml += `<div class="text-sm text-gray-700">Showing ${pagination.currentPage} of ${pagination.lastPage} pages (${pagination.total} total jobs)</div>`;
        paginationHtml += '<div class="flex space-x-2">';

        // Previous button
        if (pagination.currentPage > 1) {
          paginationHtml += `<button onclick="loadJobsPage(${pagination.currentPage - 1})" class="px-3 py-2 text-sm bg-white border border-gray-300 rounded-md hover:bg-gray-50">Previous</button>`;
        }

        // Next button
        if (pagination.currentPage < pagination.lastPage) {
          paginationHtml += `<button onclick="loadJobsPage(${pagination.currentPage + 1})" class="px-3 py-2 text-sm bg-white border border-gray-300 rounded-md hover:bg-gray-50">Next</button>`;
        }

        paginationHtml += '</div></div>';
        paginationContainer.innerHTML = paginationHtml;
      }

      async function loadJobsPage(page) {
        const url = new URL('/api/admin/jobs', window.location.origin);
        url.searchParams.set('page', page);

        try {
          const response = await fetch(url);
          const result = await response.json();

          if (result.success) {
            populateJobsTable(result.data.jobs);
            updateJobsPagination(result.data.pagination);
          }
        } catch (error) {
          console.error('Error loading jobs page:', error);
          showError('Error loading jobs page');
        }
      }

      async function toggleJobStatus(jobId, newStatus) {
        try {
          const response = await fetch(`/api/admin/jobs/${jobId}/status`, {
            method: 'PUT',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ isActive: newStatus })
          });

          const result = await response.json();

          if (result.success) {
            loadJobs(); // Reload the jobs table
            showSuccess(result.message);
          } else {
            showError(result.message || 'Failed to update job status');
          }
        } catch (error) {
          console.error('Error updating job status:', error);
          showError('Error updating job status');
        }
      }

      function viewJob(jobId) {
        window.open(`/jobs/${jobId}`, '_blank');
      }

      function loadApplicants() {
        console.log('Loading applicants...');
        // TODO: Implement applicants loading
      }

      async function loadCriteria() {
        console.log('Loading criteria...');
        showLoading();

        try {
          const response = await fetch('/api/admin/criteria', {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();

          if (result.success) {
            populateCriteriaTable(result.data.criteria);
            updateWeightSummary(result.data.totalWeight);
          } else {
            showError('Failed to load criteria data');
          }
        } catch (error) {
          console.error('Error loading criteria:', error);
          showError('Error loading criteria: ' + error.message);
        } finally {
          hideLoading();
        }
      }

      function populateCriteriaTable(criteria) {
        const tableBody = document.getElementById('criteria-table-body');
        if (!tableBody) return;

        if (criteria.length === 0) {
          tableBody.innerHTML = `
            <tr>
              <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                No criteria found
              </td>
            </tr>
          `;
          return;
        }

        tableBody.innerHTML = criteria.map(criterion => `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">${escapeHtml(criterion.name)}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">${(criterion.weight * 100).toFixed(1)}%</div>
              <div class="text-xs text-gray-500">${criterion.weight.toFixed(3)}</div>
            </td>
            <td class="px-6 py-4">
              <div class="text-sm text-gray-900 max-w-xs truncate" title="${escapeHtml(criterion.description || '')}">
                ${escapeHtml(criterion.description || 'No description')}
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">${criterion.sortOrder}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${criterion.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                ${criterion.isActive ? 'Active' : 'Inactive'}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <button
                onclick="editCriterion(${criterion.id})"
                class="text-primary-600 hover:text-primary-900 mr-3"
              >
                Edit
              </button>
              <button
                onclick="toggleCriterionStatus(${criterion.id}, ${!criterion.isActive})"
                class="text-primary-600 hover:text-primary-900 mr-3"
              >
                ${criterion.isActive ? 'Deactivate' : 'Activate'}
              </button>
              <button
                onclick="deleteCriterion(${criterion.id})"
                class="text-red-600 hover:text-red-900"
              >
                Delete
              </button>
            </td>
          </tr>
        `).join('');
      }

      function updateWeightSummary(totalWeight) {
        const totalWeightElement = document.getElementById('total-weight');
        const weightProgressElement = document.getElementById('weight-progress');

        if (totalWeightElement) {
          totalWeightElement.textContent = totalWeight.toFixed(2);
        }

        if (weightProgressElement) {
          const percentage = Math.min(totalWeight * 100, 100);
          weightProgressElement.style.width = `${percentage}%`;

          // Change color based on weight total
          if (totalWeight < 0.95) {
            weightProgressElement.className = 'bg-yellow-600 h-2 rounded-full transition-all duration-300';
          } else if (totalWeight > 1.05) {
            weightProgressElement.className = 'bg-red-600 h-2 rounded-full transition-all duration-300';
          } else {
            weightProgressElement.className = 'bg-blue-600 h-2 rounded-full transition-all duration-300';
          }
        }
      }

      async function toggleCriterionStatus(criterionId, newStatus) {
        try {
          const response = await fetch(`/api/admin/criteria/${criterionId}`, {
            method: 'PUT',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ isActive: newStatus })
          });

          const result = await response.json();

          if (result.success) {
            loadCriteria(); // Reload the criteria table
            showSuccess(result.message);
          } else {
            showError(result.message || 'Failed to update criterion status');
          }
        } catch (error) {
          console.error('Error updating criterion status:', error);
          showError('Error updating criterion status');
        }
      }

      function editCriterion(criterionId) {
        // TODO: Implement edit functionality
        alert('Edit functionality will be implemented in a future update');
      }

      async function deleteCriterion(criterionId) {
        if (!confirm('Are you sure you want to delete this criterion? This action cannot be undone.')) {
          return;
        }

        try {
          const response = await fetch(`/api/admin/criteria/${criterionId}`, {
            method: 'DELETE',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          });

          const result = await response.json();

          if (result.success) {
            loadCriteria(); // Reload the criteria table
            showSuccess(result.message);
          } else {
            showError(result.message || 'Failed to delete criterion');
          }
        } catch (error) {
          console.error('Error deleting criterion:', error);
          showError('Error deleting criterion');
        }
      }

      // Utility functions
      function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }

      function showLoading() {
        const loadingState = document.getElementById('loading-state');
        if (loadingState) {
          loadingState.classList.remove('hidden');
        }
      }

      function hideLoading() {
        const loadingState = document.getElementById('loading-state');
        if (loadingState) {
          loadingState.classList.add('hidden');
        }
      }

      function showError(message) {
        // Simple error display - could be enhanced with a proper notification system
        console.error(message);
        alert('Error: ' + message);
      }

      function showSuccess(message) {
        // Simple success display - could be enhanced with a proper notification system
        console.log(message);
        alert('Success: ' + message);
      }

      // Search functionality for jobs
      function setupJobsSearch() {
        const searchInput = document.getElementById('jobs-search');
        const statusFilter = document.getElementById('jobs-status-filter');

        if (searchInput) {
          let searchTimeout;
          searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
              loadJobsWithFilters();
            }, 300); // Debounce search
          });
        }

        if (statusFilter) {
          statusFilter.addEventListener('change', function() {
            loadJobsWithFilters();
          });
        }
      }

      async function loadJobsWithFilters() {
        const searchInput = document.getElementById('jobs-search');
        const statusFilter = document.getElementById('jobs-status-filter');

        const params = new URLSearchParams();

        if (searchInput && searchInput.value.trim()) {
          params.set('search', searchInput.value.trim());
        }

        if (statusFilter && statusFilter.value) {
          params.set('status', statusFilter.value);
        }

        const url = `/api/admin/jobs?${params.toString()}`;

        try {
          showLoading();
          const response = await fetch(url, {
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          });

          const result = await response.json();

          if (result.success) {
            populateJobsTable(result.data.jobs);
            updateJobsPagination(result.data.pagination);
          } else {
            showError('Failed to load jobs data');
          }
        } catch (error) {
          console.error('Error loading jobs with filters:', error);
          showError('Error loading jobs');
        } finally {
          hideLoading();
        }
      }
    </script>
  </body>
</html>
